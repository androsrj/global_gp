results <- readRDS(path)
beta0_samples <- results[[i]]$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(0, 6),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
length(results)
library(spBayes)
scen <- 2
nReps <- 5
path <- paste0("data/small/scen", scen)
load(paste0(path, "/train.RData"))
load(paste0(path, "/test.RData"))
source("other_functions/helper_functions.R")
d.max <- max(iDist(train$U))
r <- 2
n <- nrow(train$X)
nTest <- nrow(test$X)
priors <- list("phi.Unif"=list(rep(3/(0.75*d.max), r), rep(3/(0.001*d.max), r)),
"sigma.sq.IG"=list(rep(2, r), rep(1, r)),
"tau.sq.IG"=c(2, 1))
starting <- list("phi"=rep(3/(0.1*d.max), r), "sigma.sq"=rep(1, r), "tau.sq"=1)
tuning <- list("phi"=rep(0.1, r), "sigma.sq"=rep(0.05, r), "tau.sq"=0.1)
n.samples <- 500
results <- vector("list", nReps)
for (i in 1:nReps) {
m.3 <- spSVC(train$Y[1:n,] ~ train$X, coords=train$U,
starting=starting, svc.cols=c(1,2),
tuning=tuning, priors=priors, cov.model="exponential",
n.samples=n.samples, n.report=5000, n.omp.threads=4)
m.3 <- spRecover(m.3, start=floor(0.5*n.samples), thin=2,
n.omp.threads=4, verbose=FALSE)
results[[i]] <- m.3
}
saveRDS(results, paste0("objects/svc_scen", scen, ".RDS"))
library(spBayes)
scen <- 3
nReps <- 5
path <- paste0("data/small/scen", scen)
load(paste0(path, "/train.RData"))
load(paste0(path, "/test.RData"))
source("other_functions/helper_functions.R")
d.max <- max(iDist(train$U))
r <- 2
n <- nrow(train$X)
nTest <- nrow(test$X)
priors <- list("phi.Unif"=list(rep(3/(0.75*d.max), r), rep(3/(0.001*d.max), r)),
"sigma.sq.IG"=list(rep(2, r), rep(1, r)),
"tau.sq.IG"=c(2, 1))
starting <- list("phi"=rep(3/(0.1*d.max), r), "sigma.sq"=rep(1, r), "tau.sq"=1)
tuning <- list("phi"=rep(0.1, r), "sigma.sq"=rep(0.05, r), "tau.sq"=0.1)
n.samples <- 500
results <- vector("list", nReps)
for (i in 1:nReps) {
m.3 <- spSVC(train$Y[1:n,] ~ train$X, coords=train$U,
starting=starting, svc.cols=c(1,2),
tuning=tuning, priors=priors, cov.model="exponential",
n.samples=n.samples, n.report=5000, n.omp.threads=4)
m.3 <- spRecover(m.3, start=floor(0.5*n.samples), thin=2,
n.omp.threads=4, verbose=FALSE)
results[[i]] <- m.3
}
saveRDS(results, paste0("objects/svc_scen", scen, ".RDS"))
library(spBayes)
scen <- 4
nReps <- 5
path <- paste0("data/small/scen", scen)
load(paste0(path, "/train.RData"))
load(paste0(path, "/test.RData"))
source("other_functions/helper_functions.R")
d.max <- max(iDist(train$U))
r <- 2
n <- nrow(train$X)
nTest <- nrow(test$X)
priors <- list("phi.Unif"=list(rep(3/(0.75*d.max), r), rep(3/(0.001*d.max), r)),
"sigma.sq.IG"=list(rep(2, r), rep(1, r)),
"tau.sq.IG"=c(2, 1))
starting <- list("phi"=rep(3/(0.1*d.max), r), "sigma.sq"=rep(1, r), "tau.sq"=1)
tuning <- list("phi"=rep(0.1, r), "sigma.sq"=rep(0.05, r), "tau.sq"=0.1)
n.samples <- 500
results <- vector("list", nReps)
for (i in 1:nReps) {
m.3 <- spSVC(train$Y[1:n,] ~ train$X, coords=train$U,
starting=starting, svc.cols=c(1,2),
tuning=tuning, priors=priors, cov.model="exponential",
n.samples=n.samples, n.report=5000, n.omp.threads=4)
m.3 <- spRecover(m.3, start=floor(0.5*n.samples), thin=2,
n.omp.threads=4, verbose=FALSE)
results[[i]] <- m.3
}
saveRDS(results, paste0("objects/svc_scen", scen, ".RDS"))
library(spBayes)
scen <- 5
nReps <- 5
path <- paste0("data/small/scen", scen)
load(paste0(path, "/train.RData"))
load(paste0(path, "/test.RData"))
source("other_functions/helper_functions.R")
d.max <- max(iDist(train$U))
r <- 2
n <- nrow(train$X)
nTest <- nrow(test$X)
priors <- list("phi.Unif"=list(rep(3/(0.75*d.max), r), rep(3/(0.001*d.max), r)),
"sigma.sq.IG"=list(rep(2, r), rep(1, r)),
"tau.sq.IG"=c(2, 1))
starting <- list("phi"=rep(3/(0.1*d.max), r), "sigma.sq"=rep(1, r), "tau.sq"=1)
tuning <- list("phi"=rep(0.1, r), "sigma.sq"=rep(0.05, r), "tau.sq"=0.1)
n.samples <- 500
results <- vector("list", nReps)
for (i in 1:nReps) {
m.3 <- spSVC(train$Y[1:n,] ~ train$X, coords=train$U,
starting=starting, svc.cols=c(1,2),
tuning=tuning, priors=priors, cov.model="exponential",
n.samples=n.samples, n.report=5000, n.omp.threads=4)
m.3 <- spRecover(m.3, start=floor(0.5*n.samples), thin=2,
n.omp.threads=4, verbose=FALSE)
results[[i]] <- m.3
}
saveRDS(results, paste0("objects/svc_scen", scen, ".RDS"))
library(spBayes)
scen <- 6
nReps <- 5
path <- paste0("data/small/scen", scen)
load(paste0(path, "/train.RData"))
load(paste0(path, "/test.RData"))
source("other_functions/helper_functions.R")
d.max <- max(iDist(train$U))
r <- 2
n <- nrow(train$X)
nTest <- nrow(test$X)
priors <- list("phi.Unif"=list(rep(3/(0.75*d.max), r), rep(3/(0.001*d.max), r)),
"sigma.sq.IG"=list(rep(2, r), rep(1, r)),
"tau.sq.IG"=c(2, 1))
starting <- list("phi"=rep(3/(0.1*d.max), r), "sigma.sq"=rep(1, r), "tau.sq"=1)
tuning <- list("phi"=rep(0.1, r), "sigma.sq"=rep(0.05, r), "tau.sq"=0.1)
n.samples <- 500
results <- vector("list", nReps)
for (i in 1:nReps) {
m.3 <- spSVC(train$Y[1:n,] ~ train$X, coords=train$U,
starting=starting, svc.cols=c(1,2),
tuning=tuning, priors=priors, cov.model="exponential",
n.samples=n.samples, n.report=5000, n.omp.threads=4)
m.3 <- spRecover(m.3, start=floor(0.5*n.samples), thin=2,
n.omp.threads=4, verbose=FALSE)
results[[i]] <- m.3
}
saveRDS(results, paste0("objects/svc_scen", scen, ".RDS"))
library(ggplot2)
library(spBayes)
nScen <- 6
nReps <- 5
line.type <- 2
line.width <- 4
# Density plots for beta0
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta0_samples <- results[[i]]$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(0, 6),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
length(results)
str(results)
beta0_samples
library(ggplot2)
library(spBayes)
nScen <- 6
nReps <- 5
line.type <- 2
line.width <- 4
# Density plots for beta0
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta0_samples <- results[[1]]$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(0, 6),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta1
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta1_samples <- results[[1]]$p.beta.recover.samples[, 2]
hist(beta1_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-0.5, 1))
abline(v = 0.5, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_1 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta2
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta2_samples <- results[[1]]$p.beta.recover.samples[, 3]
hist(beta2_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-1.5, -0.5),
breaks = 10)
abline(v = -1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_2 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for tau2
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
tau2_samples <- results[[1]]$p.theta.samples[, 3]
if (i == 4) {
true_tau2 <- 2
} else {
true_tau2 = 0.2
}
hist(tau2_samples,
xlab = paste0("Scenario ", i),
main = "")
abline(v = true_tau2, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Tau2 Samples", side = 3, line = - 2, outer = TRUE)
}
# Get diagnostics (rmse, coverage, length)
rmse <- cvg <- len <- c()
for (i in 1:nScen) {
path <- paste0("objects/small_scen", i, ".RDS")
results <- readRDS(path)
load(paste0("data/small/scen", i, "/test.RData"))
STest <- nrow(test$Z)
nTest <- nrow(test$X)
n <- nrow(train$X)
rmse_vec <- cvg_vec <- len_vec <- numeric(STest)
a <- .05
for (j in 1:STest) {
truth <- test$Y[(nTest*(j-1)+1):(nTest*j), ]
m.3.pred <- spPredict(m.3, pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
preds <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
rmse_vec[j] <- sqrt(mean((truth - preds)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg_vec[j] <- mean(lower < truth & upper > truth)
len_vec[j] <- mean(upper - lower)
}
rmse <- c(rmse, rmse_vec)
cvg <- c(cvg, cvg_vec)
len <- c(len, len_vec)
}
# Get diagnostics (rmse, coverage, length)
rmse <- cvg <- len <- c()
for (i in 1:nScen) {
path <- paste0("objects/small_scen", i, ".RDS")
results <- readRDS(path)
load(paste0("data/small/scen", i, "/test.RData"))
STest <- nrow(test$Z)
nTest <- nrow(test$X)
rmse_vec <- cvg_vec <- len_vec <- numeric(STest)
a <- .05
for (j in 1:STest) {
truth <- test$Y[(nTest*(j-1)+1):(nTest*j), ]
m.3.pred <- spPredict(m.3, pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
preds <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
rmse_vec[j] <- sqrt(mean((truth - preds)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg_vec[j] <- mean(lower < truth & upper > truth)
len_vec[j] <- mean(upper - lower)
}
rmse <- c(rmse, rmse_vec)
cvg <- c(cvg, cvg_vec)
len <- c(len, len_vec)
}
for (i in 1:nScen) {
path <- paste0("objects/small_scen", i, ".RDS")
results <- readRDS(path)
load(paste0("data/small/scen", i, "/test.RData"))
STest <- nrow(test$Z)
nTest <- nrow(test$X)
rmse_vec <- cvg_vec <- len_vec <- numeric(STest)
a <- .05
for (j in 1:STest) {
truth <- test$Y[(nTest*(j-1)+1):(nTest*j), ]
m.3.pred <- spPredict(results[[1]], pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
preds <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
rmse_vec[j] <- sqrt(mean((truth - preds)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg_vec[j] <- mean(lower < truth & upper > truth)
len_vec[j] <- mean(upper - lower)
}
rmse <- c(rmse, rmse_vec)
cvg <- c(cvg, cvg_vec)
len <- c(len, len_vec)
}
# Get diagnostics (rmse, coverage, length)
rmse <- cvg <- len <- c()
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
load(paste0("data/small/scen", i, "/test.RData"))
STest <- nrow(test$Z)
nTest <- nrow(test$X)
rmse_vec <- cvg_vec <- len_vec <- numeric(STest)
a <- .05
for (j in 1:STest) {
truth <- test$Y[(nTest*(j-1)+1):(nTest*j), ]
m.3.pred <- spPredict(results[[1]], pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
preds <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
rmse_vec[j] <- sqrt(mean((truth - preds)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg_vec[j] <- mean(lower < truth & upper > truth)
len_vec[j] <- mean(upper - lower)
}
rmse <- c(rmse, rmse_vec)
cvg <- c(cvg, cvg_vec)
len <- c(len, len_vec)
}
# Organize data
df <- data.frame(RMSE = rmse,
Coverage = cvg,
Length = len,
Scenario = factor(rep(1:nScen, each = nReps)),
Rep = rep(1:nReps, nScen))
# Interval Coverage
ggplot(df, aes(x = Scenario, y = Coverage, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Coverage (95%)",
x = "", y = "")
# Interval Length
ggplot(df, aes(x = Scenario, y = Length, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Length (95%)",
x = "", y = "")
df
rmse
# Get diagnostics (rmse, coverage, length)
rmse <- cvg <- len <- c()
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
load(paste0("data/small/scen", i, "/test.RData"))
STest <- nrow(test$Z)
nTest <- nrow(test$X)
a <- .05
for (j in 1:nReps) {
rmse_vec <- cvg_vec <- len_vec <- numeric(STest)
for (k in 1:STest) {
truth <- test$Y[(nTest*(k-1)+1):(nTest*k), ]
m.3.pred <- spPredict(results[[1]], pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
preds <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
rmse_vec[k] <- sqrt(mean((truth - preds)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg_vec[k] <- mean(lower < truth & upper > truth)
len_vec[k] <- mean(upper - lower)
}
rmse_vec <- mean(rmse_vec)
cvg_vec <- mean(cvg_vec)
len_vec <- mean(len_vec)
}
rmse <- c(rmse, rmse_vec)
cvg <- c(cvg, cvg_vec)
len <- c(len, len_vec)
}
# Organize data
df <- data.frame(RMSE = rmse,
Coverage = cvg,
Length = len,
Scenario = factor(rep(1:nScen, each = nReps)),
Rep = rep(1:nReps, nScen))
# Interval Coverage
ggplot(df, aes(x = Scenario, y = Coverage, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Coverage (95%)",
x = "", y = "")
# Interval Length
ggplot(df, aes(x = Scenario, y = Length, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Length (95%)",
x = "", y = "")
df
# Get diagnostics (rmse, coverage, length)
rmse <- cvg <- len <- c()
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
load(paste0("data/small/scen", i, "/test.RData"))
STest <- nrow(test$Z)
nTest <- nrow(test$X)
a <- .05
for (j in 1:nReps) {
rmse_vec <- cvg_vec <- len_vec <- numeric(STest)
for (k in 1:STest) {
truth <- test$Y[(nTest*(k-1)+1):(nTest*k), ]
m.3.pred <- spPredict(results[[j]], pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
preds <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
rmse_vec[k] <- sqrt(mean((truth - preds)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg_vec[k] <- mean(lower < truth & upper > truth)
len_vec[k] <- mean(upper - lower)
}
rmse_vec <- mean(rmse_vec)
cvg_vec <- mean(cvg_vec)
len_vec <- mean(len_vec)
}
rmse <- c(rmse, rmse_vec)
cvg <- c(cvg, cvg_vec)
len <- c(len, len_vec)
}
# Organize data
df <- data.frame(RMSE = rmse,
Coverage = cvg,
Length = len,
Scenario = factor(rep(1:nScen, each = nReps)),
Rep = rep(1:nReps, nScen))
# Interval Coverage
ggplot(df, aes(x = Scenario, y = Coverage, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Coverage (95%)",
x = "", y = "")
# Interval Length
ggplot(df, aes(x = Scenario, y = Length, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Length (95%)",
x = "", y = "")
df
}
# Get diagnostics (rmse, coverage, length)
rmse <- cvg <- len <- c()
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
load(paste0("data/small/scen", i, "/test.RData"))
STest <- nrow(test$Z)
nTest <- nrow(test$X)
a <- .05
for (j in 1:nReps) {
rmse_vec <- cvg_vec <- len_vec <- numeric(STest)
for (k in 1:STest) {
truth <- test$Y[(nTest*(k-1)+1):(nTest*k), ]
m.3.pred <- spPredict(results[[j]], pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
preds <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
rmse_vec[k] <- sqrt(mean((truth - preds)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg_vec[k] <- mean(lower < truth & upper > truth)
len_vec[k] <- mean(upper - lower)
}
rmse_vec <- mean(rmse_vec)
cvg_vec <- mean(cvg_vec)
len_vec <- mean(len_vec)
rmse <- c(rmse, rmse_vec)
cvg <- c(cvg, cvg_vec)
len <- c(len, len_vec)
}
}
rmse
# Organize data
df <- data.frame(RMSE = rmse,
Coverage = cvg,
Length = len,
Scenario = factor(rep(1:nScen, each = nReps)),
Rep = rep(1:nReps, nScen))
# Interval Coverage
ggplot(df, aes(x = Scenario, y = Coverage, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Coverage (95%)",
x = "", y = "")
# Interval Length
ggplot(df, aes(x = Scenario, y = Length, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Length (95%)",
x = "", y = "")
