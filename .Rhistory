y2.east <- east(x2.east)
ggplot(data = coords, aes(x=x, y=y, col=elev_meters)) +
geom_point() +
geom_vline(aes(xintercept = -74.82)) +
geom_vline(aes(xintercept = -74.8)) +
geom_hline(aes(yintercept = 39.1)) +
geom_hline(aes(yintercept = 39.08))
load("C:/Users/andro/OneDrive/Desktop/School/research/storm_surges/flood/data/flood_data.RData")
n <- 100
nTest <- 25
S <- 10
STest <- 10
which.storms <- sample(4000, S + STest)
train.storms <- which.storms[1:S]
test.storms <- which.storms[(S+1):(S+STest)]
coords.subset <- coords[coords$x < -74.82 & coords$x > -74.84 & coords$y < 39.08 & coords$y > 39.06, ]
ggplot(data = coords, aes(x=x, y=y, col=elev_meters)) +
geom_point() +
geom_vline(aes(xintercept = -74.82)) +
geom_vline(aes(xintercept = -74.84)) +
geom_hline(aes(yintercept = 39.06)) +
geom_hline(aes(yintercept = 39.08))
ggplot(data = coords.subset, aes(x=x, y=y, col=elev_meters)) +
geom_tile()
ggplot(data = coords.subset, aes(x=x, y=y, fill=elev_meters)) +
geom_tile()
load("C:/Users/andro/OneDrive/Desktop/School/research/storm_surges/flood/data/flood_data.RData")
coords.subset <- coords[coords$x < -74.81 & coords$x > -74.83 & coords$y < 39.08 & coords$y > 39.06, ]
ggplot(data = coords, aes(x=x, y=y, col=elev_meters)) +
geom_point() +
geom_vline(aes(xintercept = -74.81)) +
geom_vline(aes(xintercept = -74.83)) +
geom_hline(aes(yintercept = 39.06)) +
geom_hline(aes(yintercept = 39.08))
ggplot(data = coords.subset, aes(x=x, y=y, fill=elev_meters)) +
geom_tile()
dist2d <- function(a, b, c) {
v1 <- b - c
v2 <- a - b
m <- cbind(v1,v2)
d <- abs(det(m))/sqrt(sum(v1*v1))
d
}
west <- function(x) {
1.7*x + 166.45
}
east <- function(x) {
1.25*x + 132.5
}
x1.west <- -75
y1.west <- west(x1.west)
x2.west <- -74.8
y2.west <- west(x2.west)
x1.east <- -74.9
y1.east <- east(x1.east)
x2.east <- -74.6
y2.east <- east(x2.east)
coords.subset$dist.west <- coords.subset$dist.east <- 0
for (i in 1:nrow(coords.subset)) {
loc <- c(coords.subset$x[i], coords.subset$y[i])
start <- c(x1.west, y1.west)
end <- c(x2.west, y2.west)
coords.subset$dist.west[i] <- dist2d(loc, start, end)
start <- c(x1.east, y1.east)
end <- c(x2.weast, y2.east)
coords.subset$dist.east[i] <- dist2d(loc, start, end)
}
coords.subset$dist.west <- coords.subset$dist.east <- 0
for (i in 1:nrow(coords.subset)) {
loc <- c(coords.subset$x[i], coords.subset$y[i])
start <- c(x1.west, y1.west)
end <- c(x2.west, y2.west)
coords.subset$dist.west[i] <- dist2d(loc, start, end)
start <- c(x1.east, y1.east)
end <- c(x2.east, y2.east)
coords.subset$dist.east[i] <- dist2d(loc, start, end)
}
head(coords.subset)
mean(coords.subset$dist.east < coords.subset$dist.west)
load("data/flood_data.RData")
n <- 100
nTest <- 25
S <- 10
STest <- 10
which.storms <- sample(4000, S + STest)
train.storms <- which.storms[1:S]
test.storms <- which.storms[(S+1):(S+STest)]
coords.subset <- coords[coords$x < -74.81 & coords$x > -74.83 & coords$y < 39.08 & coords$y > 39.06, ]
ggplot(data = coords, aes(x=x, y=y, col=elev_meters)) +
geom_point() +
geom_vline(aes(xintercept = -74.81)) +
geom_vline(aes(xintercept = -74.83)) +
geom_hline(aes(yintercept = 39.06)) +
geom_hline(aes(yintercept = 39.08))
source("coastlines.R")
head(coords.subset)
X <- cbind(coords.subset$elev_meters[train.index], coords.subset$dist.east[train.index])
which.points <- sample(nrow(coords.subset), n + nTest)
train.index <- which.points[1:n]
test.index <- which.points[(n+1):(n+nTest)]
X <- cbind(coords.subset$elev_meters[train.index], coords.subset$dist.east[train.index])
head(X)
Z <- inputs[STrain, 1:2]
Z <- inputs[train.storms, 1:2]
Y <- out[train.storms, train.index]
dim(Y)
Y[1:2,1:5]
c(Y)
Y[1:2,1:5]
class(Y)
Y <- as.matrix(out[train.storms, train.index])
Y[1:2,1:5]
c(Y)
Y <- t(as.matrix(out[train.storms, train.index]))
Y[1:2,1:5]
c(Y)
di(Y)
dim(Y)
Y <- c(t(as.matrix(out[train.storms, train.index])))
Y <- matrix(c(t(as.matrix(out[train.storms, train.index]))), ncol = 1)
dim(Y)
Z
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
library(fields)
load("data/flood_data.RData")
n <- 100
nTest <- 25
S <- 10
STest <- 10
which.storms <- sample(4000, S + STest)
train.storms <- which.storms[1:S]
test.storms <- which.storms[(S+1):(S+STest)]
coords.subset <- coords[coords$x < -74.81 & coords$x > -74.83 & coords$y < 39.08 & coords$y > 39.06, ]
ggplot(data = coords, aes(x=x, y=y, col=elev_meters)) +
geom_point() +
geom_vline(aes(xintercept = -74.81)) +
geom_vline(aes(xintercept = -74.83)) +
geom_hline(aes(yintercept = 39.06)) +
geom_hline(aes(yintercept = 39.08))
ggplot(data = coords.subset, aes(x=x, y=y, fill=elev_meters)) +
geom_tile()
source("coastlines.R")
which.points <- sample(nrow(coords.subset), n + nTest)
train.index <- which.points[1:n]
test.index <- which.points[(n+1):(n+nTest)]
X <- cbind(coords.subset$elev_meters[train.index],
coords.subset$dist.east[train.index])
Z <- inputs[train.storms, 1:2]
Y <- matrix(c(t(as.matrix(out[train.storms, train.index]))), ncol = 1)
U <- coords[train.index, 1:2]
D <- fields::rdist(U)
XTest <- cbind(coords.subset$elev_meters[test.index],
coords.subset$dist.east[test.index])
ZTest <- inputs[test.storms, 1:2]
YTest <- matrix(c(t(as.matrix(out[test.storms, test.index]))), ncol = 1)
UTest <- coords[test.index, 1:2]
DTest <- fields::rdist(UTest)
K <- 9
propSD <- list(sigf2 = 0.6,
thf = 5,
sigma2 = seq(0.1, 0.25, length = K),
tau2 = 0.4,
theta = seq(0.5, 0.8, length = K))
starting <- list(sigma2 = seq(50, 100, length = K),
theta = rep(0.5, K),
sigf2 = 6,
thf = 8,
tau2 = 0.1,
beta = c(0, 0, 0))
cat("Setup complete \n")
results <- vector("list", length = nReps)
results<- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
starting = starting,
propSD = propSD,
nIter = 20, nBurn = 10, nThin=2,
model = "full_gp")
#theta
mean(train$Y)
#theta
mean(Y)
sd(Y)
results$posteriorMeans
results$acceptance
results$preds
results$preds[2,]
results$preds[2,1:25]
YTest[1:25]
pr = results$preds[2,1:25]
real = YTest[1:25]
sqrt(mean((pr-real)^2))
sd(YTest[1:25])
STest <- nrow(ZTest)
rmse <- cvg <- width <- scores <- crps <- numeric(STest)
a <- .05
for (i in 1:STest) {
truth <- YTest[(nTest*(i-1)+1):(i*nTest)]
pred <- results$preds[2, (nTest*(i-1)+1):(i*nTest)]
rmse[i] <- sqrt(mean((truth - pred)^2))
lower <- results$preds[1, (nTest*(i-1)+1):(i*nTest)]
upper <- results$preds[3, (nTest*(i-1)+1):(i*nTest)]
cvg[i] <- mean(lower < truth & upper > truth)
width[i] <- mean(upper - lower)
scores[i] <- mean((upper - lower) +
2/a * (lower - truth) * (truth < lower) +
2/a * (truth - upper) * (truth > upper))
predSamples <- t(results$predSamples[(nTest*(i-1)+1):(i*nTest), ])
crps[i] <- mean(energy_score(truth, predSamples))
}
rmse
cat(paste0("Root MS error: ", round(mean(rmse), 3), "\n"))
cvg
cat(paste0("Mean coverage: ", round(mean(cvg), 3), "\n"))
width
cat(paste0("Mean width: ", round(mean(width), 3), "\n"))
scores
cat(paste0("Mean interval score: ", round(mean(scores), 3), "\n"))
crps
cat(paste0("Mean CRPS: ", round(mean(crps), 3), "\n"))
#theta
sd(YTest)
library(fields)
library(ggplot2)
load("data/flood_data.RData")
mySeed <- 1234
which.Z <- c(1:5)
n <- 100
nTest <- 25
S <- 10
STest <- 10
set.seed(mySeed)
which.storms <- sample(4000, S + STest)
train.storms <- which.storms[1:S]
test.storms <- which.storms[(S+1):(S+STest)]
coords.subset <- coords[coords$x < -74.81 & coords$x > -74.83 & coords$y < 39.08 & coords$y > 39.06, ]
ggplot(data = coords, aes(x=x, y=y, col=elev_meters)) +
geom_point() +
geom_vline(aes(xintercept = -74.81)) +
geom_vline(aes(xintercept = -74.83)) +
geom_hline(aes(yintercept = 39.06)) +
geom_hline(aes(yintercept = 39.08))
ggplot(data = coords.subset, aes(x=x, y=y, fill=elev_meters)) +
geom_tile()
load("data/flood_data.RData")
mySeed <- 1234
which.Z <- c(1:5)
n <- 100
nTest <- 25
S <- 10
STest <- 10
set.seed(mySeed)
which.storms <- sample(4000, S + STest)
train.storms <- which.storms[1:S]
test.storms <- which.storms[(S+1):(S+STest)]
coords.subset <- coords[coords$x < -74.83 & coords$x > -74.85 & coords$y < 39.06 & coords$y > 39.04, ]
ggplot(data = coords, aes(x=x, y=y, col=elev_meters)) +
geom_point() +
geom_vline(aes(xintercept = -74.83)) +
geom_vline(aes(xintercept = -74.85)) +
geom_hline(aes(yintercept = 39.04)) +
geom_hline(aes(yintercept = 39.06))
ggplot(data = coords.subset, aes(x=x, y=y, fill=elev_meters)) +
geom_tile()
load("data/flood_data.RData")
mySeed <- 1234
which.Z <- c(1:5)
n <- 100
nTest <- 25
S <- 10
STest <- 10
set.seed(mySeed)
which.storms <- sample(4000, S + STest)
train.storms <- which.storms[1:S]
test.storms <- which.storms[(S+1):(S+STest)]
coords.subset <- coords[coords$x < -74.81 & coords$x > -74.83 & coords$y < 39.08 & coords$y > 39.06, ]
source("coastlines.R")
set.seed(mySeed)
which.points <- sample(nrow(coords.subset), n + nTest)
train.index <- which.points[1:n]
test.index <- which.points[(n+1):(n+nTest)]
train.index
dim(out)
test.index
rownames(coords.subset)
dim(out)
dim(inputs)
# SOURCES
source("mcmc_functions/slosh_mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
library(fields)
library(ggplot2)
load("data/flood_data.RData")
load('data/slosh/flood_subset.RData')
load('data/flood_subset.RData')
mySeed <- 1234
which.Z <- c(1:5)
n <- 100
nTest <- 25
S <- 10
STest <- 10
# SOURCES
source("mcmc_functions/slosh_mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
library(fields)
library(ggplot2)
set.seed(mySeed)
which.storms <- sample(4000, S + STest)
train.storms <- which.storms[1:S]
test.storms <- which.storms[(S+1):(S+STest)]
subsample <- coords$x < -74.82 & coords$x > -74.84 & coords$y < 39.07 & coords$y > 39.05
coords.subset <- coords[subsample, ]
out.subset <- out[ , subsample]
# SOURCES
source("mcmc_functions/slosh_mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
library(fields)
library(ggplot2)
load("data/slosh/flood_data.RData")
mySeed <- 1234
load("data/slosh/flood_data.RData")
mySeed <- 1234
which.Z <- c(1:5)
n <- 100
nTest <- 25
S <- 10
STest <- 10
set.seed(mySeed)
which.storms <- sample(4000, S + STest)
train.storms <- which.storms[1:S]
test.storms <- which.storms[(S+1):(S+STest)]
subsample <- coords$x < -74.82 & coords$x > -74.84 & coords$y < 39.07 & coords$y > 39.05
coords.subset <- coords[subsample, ]
out.subset <- out[ , subsample]
set.seed(mySeed)
which.points <- sample(nrow(coords.subset), n + nTest)
train.index <- which.points[1:n]
test.index <- which.points[(n+1):(n+nTest)]
X <- cbind(coords.subset$elev_meters[train.index],
coords.subset$dist.east[train.index])
Z <- inputs[train.storms, which.Z]
Y <- matrix(c(t(as.matrix(out.subset[train.storms, train.index]))), ncol = 1)
U <- coords.subset[train.index, 1:2]
D <- fields::rdist(U)
XTest <- cbind(coords.subset$elev_meters[test.index],
coords.subset$dist.east[test.index])
ZTest <- inputs[test.storms, which.Z]
YTest <- matrix(c(t(as.matrix(out.subset[test.storms, test.index]))), ncol = 1)
UTest <- coords.subset[test.index, 1:2]
DTest <- fields::rdist(UTest)
flood.train <- list(X=X, Z=Z, Y=Y, U=U, D=D)
flood.test <- list(X=XTest, Z=ZTest, Y=YTest, U=UTest, D=DTest)
K <- 9
propSD <- list(sigf2 = 0.2,
thf = 0.3,
sigma2 = seq(0.2, 0.4, length = K),
tau2 = 0.2,
theta = seq(0.5, 0.8, length = K))
starting <- list(sigma2 = seq(50, 100, length = K),
theta = rep(0.5, K),
sigf2 = 6,
thf = 0.2,
tau2 = 0.1,
beta = rep(0,7))
results<- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
starting = starting,
propSD = propSD,
nIter = 50, nBurn = 50, nThin=2,
model = "full_gp")
SigmaTest
dim(SigmaTest)
min(SigmaTest)
summary(SigmaTest)
summary(c(SigmaTest))
rmvnorm(1, sigma=SigmaTest)
rmvnorm(1, sigma=1+0.001*SigmaTest)
library(matrixcalc)
is.positive.definite(SigmaTest)
is.symmetric.matrix(SigmaTest)
SigmaTest[1:5,1:5]
SigmaTest[1,5] == SigmaTest[5,1]
SigmaTest[1,3] == SigmaTest[3,1]
rmvnorm(1, sigma = SigmaTest)
rmvnorm(1, sigma = (SigmaTest + t(SigmaTest))/2)
is.symmetric.matrix(SigmaTest)
is.symmetric.matrix((SigmaTest + t(SigmaTest))/2)
is.positive.definite((SigmaTest + t(SigmaTest))/2)
is.positive.definite((SigmaTest + t(SigmaTest))/2)
diag(3, )
diag(3, 5)
is.positive.definite((SigmaTest + t(SigmaTest))/2 + diag(0.001, 250))
is.positive.definite((SigmaTest + t(SigmaTest))/2 + diag(0.1, 250))
is.positive.definite((SigmaTest + t(SigmaTest))/2 + diag(1, 250))
diag(SigmaTest)
is.positive.definite((SigmaTest + t(SigmaTest))/2 + diag(rnorm(250, 1, 0.001), 250))
is.positive.definite((SigmaTest + t(SigmaTest))/2 + diag(rnorm(250, 1, 0.001)))
eigen(SigmaTest)
eig <- eigen(SigmaTest)
eig$values
sigf2
ATest
ATest %*% c(0,0,0,0,0,1,-0.4)
m <- ATest %*% c(0,0,0,0,0,1,-0.4)
rmvnorm(1, m)
rmvnorm(1, m, sigma=diag(250))
rmvnorm(1, m, sigma=SigmaTest
)
library(mvtnorm)
rmvnorm(1, m, sigma=SigmaTest)
summary(c(SigmaTest))
diag(1, 5)
eigen(SigmaTest + diag(1, 250))$value
eigen(SigmaTest + diag(1000, 250))$value
eigen(SigmaTest + diag(100000, 250))$value
summary(c(SigmaTest))
hist(c(SigmaTest))
# SOURCES
source("mcmc_functions/slosh_mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
library(fields)
library(ggplot2)
load("data/slosh/flood_data.RData")
mySeed <- 1234
which.Z <- c(1:5)
n <- 100
nTest <- 25
S <- 10
STest <- 10
set.seed(mySeed)
which.storms <- sample(4000, S + STest)
train.storms <- which.storms[1:S]
test.storms <- which.storms[(S+1):(S+STest)]
subsample <- coords$x < -74.82 & coords$x > -74.84 & coords$y < 39.07 & coords$y > 39.05
coords.subset <- coords[subsample, ]
out.subset <- out[ , subsample]
ggplot(data = coords, aes(x=x, y=y, col=elev_meters)) +
geom_point() +
geom_vline(aes(xintercept = -74.82)) +
geom_vline(aes(xintercept = -74.84)) +
geom_hline(aes(yintercept = 39.05)) +
geom_hline(aes(yintercept = 39.07))
ggplot(data = coords.subset, aes(x=x, y=y, fill=elev_meters)) +
geom_tile()
set.seed(mySeed)
which.points <- sample(nrow(coords.subset), n + nTest)
train.index <- which.points[1:n]
test.index <- which.points[(n+1):(n+nTest)]
X <- cbind(coords.subset$elev_meters[train.index],
coords.subset$dist.east[train.index])
Z <- inputs[train.storms, which.Z]
Y <- matrix(c(t(as.matrix(out.subset[train.storms, train.index]))), ncol = 1)
U <- coords.subset[train.index, 1:2]
D <- fields::rdist(U)
XTest <- cbind(coords.subset$elev_meters[test.index],
coords.subset$dist.east[test.index])
ZTest <- inputs[test.storms, which.Z]
YTest <- matrix(c(t(as.matrix(out.subset[test.storms, test.index]))), ncol = 1)
UTest <- coords.subset[test.index, 1:2]
DTest <- fields::rdist(UTest)
flood.train <- list(X=X, Z=Z, Y=Y, U=U, D=D)
flood.test <- list(X=XTest, Z=ZTest, Y=YTest, U=UTest, D=DTest)
save(flood.train, flood.test, file = "data/slosh/flood_subset.RData")
K <- 9
propSD <- list(sigf2 = 0.2,
thf = 0.3,
sigma2 = seq(0.2, 0.4, length = K),
tau2 = 0.2,
theta = seq(0.5, 0.8, length = K))
starting <- list(sigma2 = seq(50, 100, length = K),
theta = rep(0.5, K),
sigf2 = 6,
thf = 0.2,
tau2 = 0.1,
beta = rep(0,7))
cat("Setup complete \n")
results<- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
starting = starting,
propSD = propSD,
nIter = 50, nBurn = 50, nThin=2,
model = "full_gp")
# SOURCES
source("mcmc_functions/slosh_mcmc.R") # Metropolis-Gibbs Sampler
results<- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
starting = starting,
propSD = propSD,
nIter = 50, nBurn = 50, nThin=2,
model = "full_gp")
