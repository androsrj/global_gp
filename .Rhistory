Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.3, length = K),
tau2 = 0.3)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
results <- mcmc(X = X, Y = Y, D = D,
K = K,
theta = theta,
propSD = propSD,
nIter = 50, nBurn = 10, nThin=2,
model = "full_gp")
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.3, length = K),
tau2 = 0.3)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
results <- mcmc(X = X, Y = Y, D = D,
K = K,
theta = theta,
propSD = propSD,
nIter = 50, nBurn = 10, nThin=2,
model = "full_gp")
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.3, length = K),
tau2 = 0.3)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
results <- mcmc(X = X, Y = Y, D = D,
K = K,
theta = theta,
propSD = propSD,
nIter = 50, nBurn = 10, nThin=2,
model = "full_gp")
traceback()
dim(ATest)
dim(XTest)
setwd("~/research/global_gp")
source("other_functions/spatial_data.R")
source("other_functions/bsplines_2_3D.R")
mySeed <- 321
# Sample sizes
n <- 100
nTest <- 10
S <- 5
STest <- 5
K <- 9
# True parameter values
trueSigma2 <- seq(1, 3, length = K)
trueTau2 <- 0.2
trueTheta <- runif(K, 1, 10)
trueBeta <- c(8, -2)
# Generate training data
#set.seed(mySeed)
X <- cbind(matrix(1, nrow = n),
runif(n, -5, 5))
Z <- matrix(sort(runif(2 * S)), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigma2 = trueSigma2,
tau2 = trueTau2,
theta = trueTheta,
beta = trueBeta)
save(train, file = "data/train.RData")
# Generate testing data
#set.seed(mySeed)
XTest <- cbind(matrix(1, nrow = nTest),
runif(nTest, -5, 5))
ZTest <- matrix(sort(runif(2 * STest)), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
sigma2 = trueSigma2,
tau2 = trueTau2,
theta = trueTheta,
beta = trueBeta)
save(test, file = "data/test.RData")
save(trueTheta, file = "data/theta.RData")
trueSigma2
trueTheta
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Z <- train$Z
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
ZTest <- test$Z
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.3, length = K),
tau2 = 0.3)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 50, nBurn = 10, nThin=2,
model = "full_gp")
traceback()
dim(train$X)
dim(train$Z)
train$Z
test$Z
tcrossprod(basis[[k]] %*% exp(-theta[k] * D), basis[[k]])
k=1
tcrossprod(basis[[k]] %*% exp(-theta[k] * D), basis[[k]])
dim(basis[[1]])
dim(D)
dim(BF)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Z <- train$Z
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
ZTest <- test$Z
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.3, length = K),
tau2 = 0.3)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 50, nBurn = 10, nThin=2,
model = "full_gp")
dim(BF)
S
dim(basis)
traceback()
K
basis <<- lapply(1:K, function(k) {
Reduce("rbind", lapply(1:S, \(s) BF[s, k] * diag(n)))
})
dim(basis)
dim(basis[[1]])
n
length(Y)
dim(Y)
# Generate training data
#set.seed(mySeed)
X <- cbind(matrix(1, nrow = n),
runif(n, -5, 5))
gc()
source("other_functions/spatial_data.R")
source("other_functions/bsplines_2_3D.R")
mySeed <- 321
# Sample sizes
n <- 100
nTest <- 10
S <- 5
STest <- 5
K <- 9
# True parameter values
trueSigma2 <- seq(1, 3, length = K)
trueTau2 <- 0.2
trueTheta <- runif(K, 1, 10)
trueBeta <- c(8, -2)
# Generate training data
#set.seed(mySeed)
X <- cbind(matrix(1, nrow = n),
runif(n, -5, 5))
Z <- matrix(sort(runif(2 * S)), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigma2 = trueSigma2,
tau2 = trueTau2,
theta = trueTheta,
beta = trueBeta)
length(train$Y)
n
# Compute A from X using Kronecker product
A <- matrix(1, nrow = n) %x% X
dim(A)
n
dim(X)
source("other_functions/spatial_data.R")
source("other_functions/bsplines_2_3D.R")
mySeed <- 321
# Sample sizes
n <- 100
nTest <- 10
S <- 5
STest <- 5
K <- 9
# True parameter values
trueSigma2 <- seq(1, 3, length = K)
trueTau2 <- 0.2
trueTheta <- runif(K, 1, 10)
trueBeta <- c(8, -2)
# Generate training data
#set.seed(mySeed)
X <- cbind(matrix(1, nrow = n),
runif(n, -5, 5))
Z <- matrix(sort(runif(2 * S)), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigma2 = trueSigma2,
tau2 = trueTau2,
theta = trueTheta,
beta = trueBeta)
save(train, file = "data/train.RData")
# Generate testing data
#set.seed(mySeed)
XTest <- cbind(matrix(1, nrow = nTest),
runif(nTest, -5, 5))
ZTest <- matrix(sort(runif(2 * STest)), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
sigma2 = trueSigma2,
tau2 = trueTau2,
theta = trueTheta,
beta = trueBeta)
save(test, file = "data/test.RData")
save(trueTheta, file = "data/theta.RData")
trueSigma2
trueTheta
length(train$Y)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Z <- train$Z
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
ZTest <- test$Z
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.3, length = K),
tau2 = 0.3)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 50, nBurn = 10, nThin=2,
model = "full_gp")
traceback()
dim(A)
dim(Sigma)
dim(SigmaInv)
dim(solve(SigmaInv))
dim(solve(Sigma))
dim(SigmaBeta)
SigmaInv <- solve(Sigma)
SigmaBeta <- solve(crossprod(A, SigmaInv %*% A) + 1)
dim(SigmaBeta)
crossprod(A, SigmaInv %*% Y)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Z <- train$Z
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
ZTest <- test$Z
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.3, length = K),
tau2 = 0.3)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 50, nBurn = 10, nThin=2,
model = "full_gp")
theta
results$posteriorMeans
results$acceptance
nSamples <- length(results$paramSamples[[3]])
plot(1:nSamples, results$paramSamples[[3]], type="l")
library(MBA)
library(fields)
pdf("figures/subj1.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[1:10]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="True Surface, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,1:10]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="Predicted Surface, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[11:20]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="True Surface, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,11:20]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="Predicted Surface, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
theta
results$posteriorMeans
sigma2
results$acceptance
results$posteriorMeans
source("other_functions/spatial_data.R")
source("other_functions/bsplines_2_3D.R")
mySeed <- 321
# Sample sizes
n <- 100
nTest <- 10
S <- 5
STest <- 5
K <- 9
# True parameter values
trueSigma2 <- seq(1, 3, length = K)
trueTau2 <- 0.2
trueTheta <- runif(K, 1, 10)
trueBeta <- c(8, -2)
# Generate training data
#set.seed(mySeed)
X <- cbind(matrix(1, nrow = n),
runif(n, -5, 5))
Z <- matrix(sort(runif(2 * S)), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigma2 = trueSigma2,
tau2 = trueTau2,
theta = trueTheta,
beta = trueBeta)
save(train, file = "data/train.RData")
# Generate testing data
#set.seed(mySeed)
XTest <- cbind(matrix(1, nrow = nTest),
runif(nTest, -5, 5))
ZTest <- matrix(sort(runif(2 * STest)), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
sigma2 = trueSigma2,
tau2 = trueTau2,
theta = trueTheta,
beta = trueBeta)
save(test, file = "data/test.RData")
save(trueTheta, file = "data/theta.RData")
trueSigma2
trueTheta
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Z <- train$Z
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
ZTest <- test$Z
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.3, length = K),
tau2 = 0.3)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 100, nBurn = 10, nThin=2,
model = "full_gp")
theta
results$posteriorMeans
results$acceptance
nSamples <- length(results$paramSamples[[3]])
plot(1:nSamples, results$paramSamples[[3]], type="l")
library(MBA)
library(fields)
pdf("figures/subj1.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[1:10]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="True Surface, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,1:10]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="Predicted Surface, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[11:20]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="True Surface, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,11:20]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="Predicted Surface, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
