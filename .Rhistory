weighted.mean <- function(x, w) sum(x * w) / sum(w)
means <- apply(margins, 2, weighted.mean, w = weights)
X.centered <- as.matrix(sweep(margins, 2, means, "-"))
cov.weighted <- (t(X.centered) %*% (X.centered * weights)) / sum(weights)
#Sigma <- cov(margins)
Sigma <- cov.weighted
mu <- rep(0, 7)
nReps <- 1000000
sim <- rmvnorm(n = nReps, mean = mu, sigma = Sigma)
wins <- sim > 0
outcomes <- apply(wins, 1, paste0, collapse = "")
props <- table(outcomes) / nReps
combos <- names(props)
length(props)
sort(props)
states <- c("Arizona", "Georgia", "Michigan", "Nevada", "North Carolina", "Pennsylvania", "Wisconsin")
outcomes.df <- t(sapply(1:length(props), function(i) {
as.logical(str_extract_all(combos[i], "TRUE|FALSE")[[1]])
}))
dim(outcomes.df)
colnames(outcomes.df) <- states
outcomes.df[outcomes.df == TRUE] <- "Trump"
outcomes.df[outcomes.df == FALSE] <- "Harris"
outcomes.df <- as.data.frame(outcomes.df)
outcomes.df$Prob <- as.numeric(unname(props))
outcomes.df <- outcomes.df %>% arrange(Prob)
head(outcomes.df)
tail(outcomes.df)
evs <- c(11, 16, 15, 6, 16, 19, 10)
trump.start <- 219
harris.start <- 226
outcomes.df$Winner <- numeric(nrow(outcomes.df))
for (i in 1:nrow(outcomes.df)) {
trump.ev <- trump.start + sum(evs * (outcomes.df[i, 1:7] == "Trump"))
harris.ev <- harris.start + sum(evs * (outcomes.df[i, 1:7] == "Harris"))
if (trump.ev >= 270) {
outcomes.df$Winner[i] <- "Trump"
} else if (harris.ev >= 270) {
outcomes.df$Winner[i] <- "Harris"
} else {
outcomes.df$Winner[i] <- "Tie"
}
}
table(outcomes.df$Winner)
aggregate(data = outcomes.df, Prob ~ Winner, sum)
tail(outcomes.df)
library(mvtnorm)
library(stringr)
library(dplyr)
use.2024 <- TRUE
margins <- data.frame(
az = c(8.5, 10.1, 3.5, -0.4, 1.7),
ga = c(5.2, 8.0, 5.1, -0.3, 1.2),
mi = c(-16.8, -9.5, 0.3, -2.8, -1.8),
nv = c(-12.5, -6.6, -2.4, -2.4, 0.6),
nc = c(-0.3, 2.2, 3.6, 1.3, 1.3),
pa = c(-10.3, -5.2, 0.7, -1.2, 0.0),
wi = c(-13.9, -6.7, 0.7, -0.6, -1.1)
)
if (use.2024 == FALSE) {
margins <- margins[-5, ]
rownames(margins) <- seq(2008, 2020, by = 4)
} else {
rownames(margins) <- seq(2008, 2024, by = 4)
}
round(cor(margins), 2)
round(cov(margins), 2)
years <- c(2008, 2012, 2016, 2020, 2024)
weights <- c(1, 1, 3, 5, 10)
weighted.mean <- function(x, w) sum(x * w) / sum(w)
means <- apply(margins, 2, weighted.mean, w = weights)
X.centered <- as.matrix(sweep(margins, 2, means, "-"))
cov.weighted <- (t(X.centered) %*% (X.centered * weights)) / sum(weights)
#Sigma <- cov(margins)
Sigma <- cov.weighted
mu <- rep(0, 7)
nReps <- 1000000
sim <- rmvnorm(n = nReps, mean = mu, sigma = Sigma)
wins <- sim > 0
outcomes <- apply(wins, 1, paste0, collapse = "")
props <- table(outcomes) / nReps
combos <- names(props)
length(props)
sort(props)
states <- c("Arizona", "Georgia", "Michigan", "Nevada", "North Carolina", "Pennsylvania", "Wisconsin")
outcomes.df <- t(sapply(1:length(props), function(i) {
as.logical(str_extract_all(combos[i], "TRUE|FALSE")[[1]])
}))
dim(outcomes.df)
colnames(outcomes.df) <- states
outcomes.df[outcomes.df == TRUE] <- "Trump"
outcomes.df[outcomes.df == FALSE] <- "Harris"
outcomes.df <- as.data.frame(outcomes.df)
outcomes.df$Prob <- as.numeric(unname(props))
outcomes.df <- outcomes.df %>% arrange(Prob)
head(outcomes.df)
tail(outcomes.df)
evs <- c(11, 16, 15, 6, 16, 19, 10)
trump.start <- 219
harris.start <- 226
outcomes.df$Winner <- numeric(nrow(outcomes.df))
for (i in 1:nrow(outcomes.df)) {
trump.ev <- trump.start + sum(evs * (outcomes.df[i, 1:7] == "Trump"))
harris.ev <- harris.start + sum(evs * (outcomes.df[i, 1:7] == "Harris"))
if (trump.ev >= 270) {
outcomes.df$Winner[i] <- "Trump"
} else if (harris.ev >= 270) {
outcomes.df$Winner[i] <- "Harris"
} else {
outcomes.df$Winner[i] <- "Tie"
}
}
table(outcomes.df$Winner)
aggregate(data = outcomes.df, Prob ~ Winner, sum)
tail(outcomes.df)
# Shrink the covariance matrix towards the identity
cov.matrix <- cov(margins)
lambda <- 0.2
target <- matrix(0.3, 7, 7)
diag(target) <- 1
shrunk.cov <- lambda * target + (1 - lambda) * cov.matrix
shrunk.cov
cor.matrix <- cor(margins)
target <- matrix(0.3, 7, 7)
diag(target) <- 1
shrunk.cor <- lambda * target + (1 - lambda) * cor.matrix
shrunk.cor
round(cor(margins), 2)
lambda <- 0.5
cor.matrix <- cor(margins)
target <- matrix(0.5, 7, 7)
diag(target) <- 1
shrunk.cor <- lambda * target + (1 - lambda) * cor.matrix
shrunk.cor
Sigma <- cov(margins)
Sigma[Sigma < 0] <- 0.1
mu <- rep(0, 7)
nReps <- 1000000
sim <- rmvnorm(n = nReps, mean = mu, sigma = Sigma)
wins <- sim > 0
outcomes <- apply(wins, 1, paste0, collapse = "")
props <- table(outcomes) / nReps
combos <- names(props)
length(props)
Sigma <- cov(margins)
Sigma[Sigma < 0] <- 0
mu <- rep(0, 7)
nReps <- 1000000
sim <- rmvnorm(n = nReps, mean = mu, sigma = Sigma)
?rmultinom
rmultinom(1, 5)
rmultinom(1, 5, c(0.3, 0.2, 0.5))
n.sims <- 100
my.samples <- matrix(NA,n.sims,3)
for (i in 1:n.sims){
my.samples[i,] <- rmultinom(1,5,c(0.3,0.5,0.2))}
mean(my.samples[,2])
dim(my.samples)
head(my.samples)
rowSums(my.samples)
dim(rmultinom(100, 5, c(0.3, 0.5, 0.2)))
dpois(5, 6)
ppois(3, 6)
dbinom(6, 9, .7)
1-pbinom(3, 9, .7)
dmultinom(c(5, 4, 1, 0), 10, c(.44, .42, .10, .04))
m <- rmultinom(10000, 100, c(.25, .35, .4))
colMeans(m)
rowMeans(m)
hist(m[1,])
mean(m[1,] < 20)
m <- rmultinom(10000, 100, c(.25, .35, .4))
mean(m[1,] < 20)
m <- rmultinom(10000, 100, c(.25, .35, .4))
mean(m[1,] < 20)
m <- rmultinom(10000, 100, c(.25, .35, .4))
mean(m[1,] < 20)
m <- rmultinom(10000, 100, c(.25, .35, .4))
mean(m[1,] < 20)
pbinom(19, 100, .25)
mean(m[2,] < m[3,])
?rpois
dpois(6, 8)
# Find the probability that X = 9
dpois(9, 6)
# Find the probability that X = 9
dpois(9, 8)
# Find the probability that X = 7 OR X = 8
dpois(7, 8) + dpois(8, 8)
ppois(18, 20)
# Find the probability that X is less than or equal to 2?
ppois(2, 20)
# Find the probability that X is greater than 16?
1 - ppois(15, 20)
# Find the probability that X is at least 22?
1 - ppois(21, 20)
# Find the probability that X is between 15 and 19 (inclusive)?
ppois(19, 20) - ppois(14, 20)
# Rpois - used to draw random sample(s) from a Poisson distribution
# Generate 3 samples from a Poisson distribution with mean 5
rpois(3, 5)
rpois(3, 5)
rpois(3, 5)
rpois(3, 5)
rpois(3, 5)
rpois(3, 5)
rpois(3, 5)
dbinom(4, 15, 0.25)
dbinom(4, 15, 0.25)
dbinom(4, 15, 0.25)
dbinom(4, 15, 0.25)
# Find probability that X is 9?
dbinom(9, 15, 0.25)
# Find probability that X is between 3 and 7 (inclusive)?
pbinom(7, 15, 0.25) - pbinom(2, 15, 0.25)
dbinom(3, 15, 0.25) + dbinom(4, 15, 0.25) + dbinom(5, 15, 0.25) + dbinom(6, 15, 0.25) + dibom(7, 15, 0.25)
dbinom(3, 15, 0.25) + dbinom(4, 15, 0.25) + dbinom(5, 15, 0.25) + dbinom(6, 15, 0.25) + dbinom(7, 15, 0.25)
# Draw 10 random samples from a binomial distribution with n = 100 and p = 0.44
rbinom(10, 100, 0.44)
.44*100
?dmultinom
# Multinomial
# Example: We have a bag with thousands of marbles and are drawing 10 of them
# The bag contains 20% red, 42% green, and 38% yellow marbles
# Find the probability that we draw exactly 2 red, 4 green, and 4 yellow
dmultinom(x = c(2, 4, 4),
size = 10,
prob = c(0.20, 0.42, 0.38))
dmultinom(x = c(4, 2, 4),
size = 10,
prob = c(0.42, 0.20, 0.38))
# Simulate 20 experiments from this scenario
# (in each experiment, we're randomly selecting 10 marbles)
rmultinom(20, 10, prob = c(0.20, 0.42, 0.38))
dmultinom(x = c(2, 4, 4),
size = 10,
prob = c(0.20, 0.42, 0.38))
rmultinom(20, 10, prob = c(0.20, 0.42, 0.38))
n.sims <- 100
my.samples <- matrix(NA,n.sims,3)
View(my.samples)
i=1
my.samples[i,] <- rmultinom(1,5,c(0.3,0.5,0.2))
i=2
my.samples[i,] <- rmultinom(1,5,c(0.3,0.5,0.2))
n.sims <- 100
my.samples <- matrix(NA,n.sims,3)
for (i in 1:n.sims){
my.samples[i,] <- rmultinom(1,5,c(0.3,0.5,0.2))
}
n.sims <- 100
my.samples <- matrix(NA,n.sims,3)
for (i in 1:n.sims){
my.samples[i,] <- rmultinom(1,5,c(0.3,0.5,0.2))
}
mean(my.samples[,2])
n.sims <- 100
my.samples <- matrix(NA,n.sims,3)
for (i in 1:n.sims){
my.samples[i,] <- rmultinom(1,5,c(0.3,0.5,0.2))
}
mean(my.samples[,2])
n.sims <- 100
my.samples <- matrix(NA,n.sims,3)
for (i in 1:n.sims){
my.samples[i,] <- rmultinom(1,5,c(0.3,0.5,0.2))
}
mean(my.samples[,2])
n.sims <- 100
my.samples <- matrix(NA,n.sims,3)
for (i in 1:n.sims){
my.samples[i,] <- rmultinom(1,5,c(0.3,0.5,0.2))
}
mean(my.samples[,2])
n.sims <- 100
my.samples <- matrix(NA,n.sims,3)
for (i in 1:n.sims){
my.samples[i,] <- rmultinom(1,5,c(0.3,0.5,0.2))
}
mean(my.samples[,2])
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
mean(my.samples[2,])
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
mean(my.samples[2,])
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
mean(my.samples[2,])
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
mean(my.samples[2,])
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
mean(my.samples[2,])
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
mean(my.samples[2,])
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
mean(my.samples[2,])
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
mean(my.samples[2,])
n.sims <- 100
my.samples <- rmultinom(n.sims, 5, c(0.3,0.5,0.2))
mean(my.samples[2,])
# Simulation from HW Q15
n.sims <- 10000
patients <- rmultinom(n.sims, 100, c(0.25, 0.35, 0.40))
# Simulation from HW Q15
n.sims <- 10000
patients <- rmultinom(n.sims, 100, c(0.25, 0.35, 0.40))
patients[ , 1:10]
patients[1,]
patients[1,] < 20
mean(patients[1,] < 20)
pbinom(19, 100, .25)
a=5
satellites <- c(8, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 11, 0, 14, 8, 1, 1, 0, 5,
4, 3, 1, 2, 3, 0, 3, 5, 0, 0, 4, 0, 0, 0, 8, 5, 0, 0, 6, 0, 6,
3, 5, 6, 3, 6, 5, 6, 5, 9, 4, 6, 15, 3, 3, 3, 0, 0, 5, 0, 0, 5,
0, 0, 4, 0, 0, 3, 4, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5,
0, 0, 0, 0, 0, 0, 0, 0)
# Define the Poisson log likelihood function
poisson_log_likelihood <- function(lambda, data) {
sum(dpois(data, lambda, log = TRUE))
}
# Generate lambda sequence from 1 to 5 by 0.1
lambdas <- seq(1, 5, by = 0.1)
# Calculate log likelihood for each lambda value
log_likelihoods <- sapply(lambdas, poisson_log_likelihood, data = satellites)
# Plot results
plot(lambdas, log_likelihoods, type = "o", pch = 16,
xlab = expression(lambda),
ylab = "Log Likelihood",
main = "Log Likelihood vs Lambda for Poisson Distribution")
grid()
# Plot results
plot(lambdas, log_likelihoods, type = "o", pch = 16,
xlab = expression(lambda),
ylab = "Log Likelihood",
main = "Log Likelihood vs Lambda for Poisson Distribution")
setwd("C:/Users/andro/Downloads/crabs")
# Read in
crabs <- read.csv("CrabData.csv")
sat_counts < - crabs$Satellite
sat_counts <- sat_counts[!is.na(sat_counts)]
lambda _values < - seq(1,5, by - 0.1)
sat_counts < - crabs$Satellite
sat_counts < - crabs$Satellite
sat_counts <- crabs$Satellite
sat_counts <- sat_counts[!is.na(sat_counts)]
lambda _values <- seq(1,5, by - 0.1)
lambda_values <- seq(1,5, by - 0.1)
log_likelihoods <- c()
lambda_values <- seq(1,5, by = 0.1)
log_likelihoods <- c()
for (lambda in lambda_ values)[
for (lambda in lambda_values)[
for (lambda in lambda_values){
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelhood)
plot(lambda_values, log.likelihoods,
type = "I"
col = "blue",
for (lambda in lambda_values){
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelhood)
plot(lambda_values, log.likelihoods,
type = "I",
col = "blue",
lwd = 2,
main = "Log-Likelihood vs Lambda",
xlab = "Lambda",
ylab = "Log-Likelihood")
abline(v = mean(sat_counts), col = "red", ity = 2)
}
sat_counts <- crabs$Satellite
sat_counts <- sat_counts[!is.na(sat_counts)]
lambda_values <- seq(1,5, by = 0.1)
log_likelihoods <- c()
lambda_values
lambda=1
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelhood)
log_likelihoods <- c(log_likelihoods, total_log_likelihood)
for (lambda in lambda_values){
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelihood)
plot(lambda_values, log.likelihoods,
type = "I",
col = "blue",
lwd = 2,
main = "Log-Likelihood vs Lambda",
xlab = "Lambda",
ylab = "Log-Likelihood")
abline(v = mean(sat_counts), col = "red", ity = 2)
}
log_likelihoods <- c()
for (lambda in lambda_values){
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelihood)
plot(lambda_values, log.likelihoods,
type = "I",
col = "blue",
lwd = 2,
main = "Log-Likelihood vs Lambda",
xlab = "Lambda",
ylab = "Log-Likelihood")
abline(v = mean(sat_counts), col = "red", ity = 2)
}
plot(lambda_values, log_likelihoods,
type = "I",
col = "blue",
lwd = 2,
main = "Log-Likelihood vs Lambda",
xlab = "Lambda",
ylab = "Log-Likelihood")
for (lambda in lambda_values){
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelihood)
plot(lambda_values, log_likelihoods,
type = "I",
col = "blue",
lwd = 2,
main = "Log-Likelihood vs Lambda",
xlab = "Lambda",
ylab = "Log-Likelihood")
abline(v = mean(sat_counts), col = "red", ity = 2)
}
log_likelihoods
lambda_values
sat_counts <- crabs$Satellite
sat_counts <- sat_counts[!is.na(sat_counts)]
lambda_values <- seq(1,5, by = 0.1)
log_likelihoods <- c()
for (lambda in lambda_values){
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelihood)
plot(lambda_values, log_likelihoods,
type = "I",
col = "blue",
lwd = 2,
main = "Log-Likelihood vs Lambda",
xlab = "Lambda",
ylab = "Log-Likelihood")
abline(v = mean(sat_counts), col = "red", ity = 2)
}
for (lambda in lambda_values){
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelihood)
}
plot(lambda_values, log_likelihoods,
type = "I",
col = "blue",
lwd = 2,
main = "Log-Likelihood vs Lambda",
xlab = "Lambda",
ylab = "Log-Likelihood")
log_likelihoods
lambda_values
length(lambda_values)
length(log_likelihoods)
log_likelihoods <- c()
for (lambda in lambda_values){
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelihood)
}
plot(lambda_values, log_likelihoods,
type = "I",
col = "blue",
lwd = 2,
main = "Log-Likelihood vs Lambda",
xlab = "Lambda",
ylab = "Log-Likelihood")
abline(v = mean(sat_counts), col = "red", ity = 2)
sat_counts <- crabs$Satellite
sat_counts <- sat_counts[!is.na(sat_counts)]
lambda_values <- seq(1,5, by = 0.1)
log_likelihoods <- c()
for (lambda in lambda_values){
log_probs <- dpois(sat_counts, lambda, log = TRUE)
total_log_likelihood <- sum(log_probs)
log_likelihoods <- c(log_likelihoods, total_log_likelihood)
}
plot(lambda_values, log_likelihoods,
type = "l",
col = "blue",
lwd = 2,
main = "Log-Likelihood vs Lambda",
xlab = "Lambda",
ylab = "Log-Likelihood")
abline(v = mean(sat_counts), col = "red", ity = 2)
sd(c(2, 5, 6, 7,9))
sd(c(2, 5, 6, 7,9))
IQR(c(2, 5, 6, 7,9))
?dmultinom
1-pbinom(1, 5, .95)
?pbinom
setwd("~/research/global_gp")
