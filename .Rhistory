#cat(paste0("Mean coverage: ", round(mean(cvg), 3), "\n"))
#width
#cat(paste0("Mean width: ", round(mean(width), 3), "\n"))
#scores
#cat(paste0("Mean interval score: ", round(mean(scores), 3), "\n"))
#crps
#cat(paste0("Mean CRPS: ", round(mean(crps), 3), "\n"))
library(spBayes)
scen <- 4
path <- paste0("data/small/scen", scen)
load(paste0(path, "/train.RData"))
load(paste0(path, "/test.RData"))
source("other_functions/helper_functions.R")
d.max <- max(iDist(train$U))
r <- 2
n <- nrow(train$X)
nTest <- nrow(test$X)
priors <- list("phi.Unif"=list(rep(3/(0.75*d.max), r), rep(3/(0.001*d.max), r)),
"sigma.sq.IG"=list(rep(2, r), rep(1, r)),
"tau.sq.IG"=c(2, 1))
starting <- list("phi"=rep(3/(0.1*d.max), r), "sigma.sq"=rep(1, r), "tau.sq"=1)
tuning <- list("phi"=rep(0.1, r), "sigma.sq"=rep(0.05, r), "tau.sq"=0.1)
n.samples <- 1000
m.3 <- spSVC(train$Y[1:n,] ~ train$X, coords=train$U,
starting=starting, svc.cols=c(1,2),
tuning=tuning, priors=priors, cov.model="exponential",
n.samples=n.samples, n.report=5000, n.omp.threads=4)
m.3 <- spRecover(m.3, start=floor(0.5*n.samples), thin=2,
n.omp.threads=4, verbose=FALSE)
saveRDS(m.3, paste0("objects/svc_scen", scen, ".RDS"))
lims <- c(-15, 15)
STest <- nrow(test$Z)
rmse <- cvg <- width <- scores <- crps <- numeric(STest)
a <- .05
for (i in 1:STest) {
truth <- test$Y[(nTest*(i-1)+1):(nTest*i), ]
m.3.pred <- spPredict(m.3, pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
pred <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
#if (i == 1) {
#  pdf("figures/subj1_svc.pdf")
#  pred.surf <-  mba.surf(cbind(test$U, pred), no.X=100, no.Y=100, extend=T)$xyz.est
#  image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="SVC, Subject 1",
#             cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
#  contour(pred.surf, add=T)
#  dev.off()
#}
rmse[i] <- sqrt(mean((truth - pred)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg[i] <- mean(lower < truth & upper > truth)
width[i] <- mean(upper - lower)
scores[i] <- mean((upper - lower) +
2/a * (lower - truth) * (truth < lower) +
2/a * (truth - upper) * (truth > upper))
predSamples <- t(m.3.pred$p.y.predictive.samples)
crps[i] <- mean(energy_score(truth, predSamples))
}
#rmse
#cat(paste0("Root MS error: ", round(mean(rmse), 3), "\n"))
#cvg
#cat(paste0("Mean coverage: ", round(mean(cvg), 3), "\n"))
#width
#cat(paste0("Mean width: ", round(mean(width), 3), "\n"))
#scores
#cat(paste0("Mean interval score: ", round(mean(scores), 3), "\n"))
#crps
#cat(paste0("Mean CRPS: ", round(mean(crps), 3), "\n"))
library(spBayes)
scen <- 6
path <- paste0("data/small/scen", scen)
load(paste0(path, "/train.RData"))
load(paste0(path, "/test.RData"))
source("other_functions/helper_functions.R")
d.max <- max(iDist(train$U))
r <- 2
n <- nrow(train$X)
nTest <- nrow(test$X)
priors <- list("phi.Unif"=list(rep(3/(0.75*d.max), r), rep(3/(0.001*d.max), r)),
"sigma.sq.IG"=list(rep(2, r), rep(1, r)),
"tau.sq.IG"=c(2, 1))
starting <- list("phi"=rep(3/(0.1*d.max), r), "sigma.sq"=rep(1, r), "tau.sq"=1)
tuning <- list("phi"=rep(0.1, r), "sigma.sq"=rep(0.05, r), "tau.sq"=0.1)
n.samples <- 1000
m.3 <- spSVC(train$Y[1:n,] ~ train$X, coords=train$U,
starting=starting, svc.cols=c(1,2),
tuning=tuning, priors=priors, cov.model="exponential",
n.samples=n.samples, n.report=5000, n.omp.threads=4)
m.3 <- spRecover(m.3, start=floor(0.5*n.samples), thin=2,
n.omp.threads=4, verbose=FALSE)
saveRDS(m.3, paste0("objects/svc_scen", scen, ".RDS"))
lims <- c(-15, 15)
STest <- nrow(test$Z)
rmse <- cvg <- width <- scores <- crps <- numeric(STest)
a <- .05
for (i in 1:STest) {
truth <- test$Y[(nTest*(i-1)+1):(nTest*i), ]
m.3.pred <- spPredict(m.3, pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
pred <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
#if (i == 1) {
#  pdf("figures/subj1_svc.pdf")
#  pred.surf <-  mba.surf(cbind(test$U, pred), no.X=100, no.Y=100, extend=T)$xyz.est
#  image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="SVC, Subject 1",
#             cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
#  contour(pred.surf, add=T)
#  dev.off()
#}
rmse[i] <- sqrt(mean((truth - pred)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg[i] <- mean(lower < truth & upper > truth)
width[i] <- mean(upper - lower)
scores[i] <- mean((upper - lower) +
2/a * (lower - truth) * (truth < lower) +
2/a * (truth - upper) * (truth > upper))
predSamples <- t(m.3.pred$p.y.predictive.samples)
crps[i] <- mean(energy_score(truth, predSamples))
}
#rmse
#cat(paste0("Root MS error: ", round(mean(rmse), 3), "\n"))
#cvg
#cat(paste0("Mean coverage: ", round(mean(cvg), 3), "\n"))
#width
#cat(paste0("Mean width: ", round(mean(width), 3), "\n"))
#scores
#cat(paste0("Mean interval score: ", round(mean(scores), 3), "\n"))
#crps
#cat(paste0("Mean CRPS: ", round(mean(crps), 3), "\n"))
nScen <- 6
nReps <- 10
line.type <- 2
line.width <- 4
i=1
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
dim(results$p.beta.recover.samples)
# Density plots for beta0
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta0_samples <- results$results$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-2.5, 4),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta0
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta0_samples <- results$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-2.5, 4),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
library(spBayes)
scen <- 5
path <- paste0("data/small/scen", scen)
load(paste0(path, "/train.RData"))
load(paste0(path, "/test.RData"))
source("other_functions/helper_functions.R")
d.max <- max(iDist(train$U))
r <- 2
n <- nrow(train$X)
nTest <- nrow(test$X)
priors <- list("phi.Unif"=list(rep(3/(0.75*d.max), r), rep(3/(0.001*d.max), r)),
"sigma.sq.IG"=list(rep(2, r), rep(1, r)),
"tau.sq.IG"=c(2, 1))
starting <- list("phi"=rep(3/(0.1*d.max), r), "sigma.sq"=rep(1, r), "tau.sq"=1)
tuning <- list("phi"=rep(0.1, r), "sigma.sq"=rep(0.05, r), "tau.sq"=0.1)
n.samples <- 1000
m.3 <- spSVC(train$Y[1:n,] ~ train$X, coords=train$U,
starting=starting, svc.cols=c(1,2),
tuning=tuning, priors=priors, cov.model="exponential",
n.samples=n.samples, n.report=5000, n.omp.threads=4)
m.3 <- spRecover(m.3, start=floor(0.5*n.samples), thin=2,
n.omp.threads=4, verbose=FALSE)
saveRDS(m.3, paste0("objects/svc_scen", scen, ".RDS"))
lims <- c(-15, 15)
STest <- nrow(test$Z)
rmse <- cvg <- width <- scores <- crps <- numeric(STest)
a <- .05
for (i in 1:STest) {
truth <- test$Y[(nTest*(i-1)+1):(nTest*i), ]
m.3.pred <- spPredict(m.3, pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
pred <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
#if (i == 1) {
#  pdf("figures/subj1_svc.pdf")
#  pred.surf <-  mba.surf(cbind(test$U, pred), no.X=100, no.Y=100, extend=T)$xyz.est
#  image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="SVC, Subject 1",
#             cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
#  contour(pred.surf, add=T)
#  dev.off()
#}
rmse[i] <- sqrt(mean((truth - pred)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg[i] <- mean(lower < truth & upper > truth)
width[i] <- mean(upper - lower)
scores[i] <- mean((upper - lower) +
2/a * (lower - truth) * (truth < lower) +
2/a * (truth - upper) * (truth > upper))
predSamples <- t(m.3.pred$p.y.predictive.samples)
crps[i] <- mean(energy_score(truth, predSamples))
}
#rmse
#cat(paste0("Root MS error: ", round(mean(rmse), 3), "\n"))
#cvg
#cat(paste0("Mean coverage: ", round(mean(cvg), 3), "\n"))
#width
#cat(paste0("Mean width: ", round(mean(width), 3), "\n"))
#scores
#cat(paste0("Mean interval score: ", round(mean(scores), 3), "\n"))
#crps
#cat(paste0("Mean CRPS: ", round(mean(crps), 3), "\n"))
library(ggplot2)
nScen <- 6
nReps <- 10
line.type <- 2
line.width <- 4
# Density plots for beta0
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta0_samples <- results$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-2.5, 4),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta1
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/small_scen", i, ".RDS")
results <- readRDS(path)
beta1_samples <- results$p.beta.recover.samples[, 2]
hist(beta1_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-1.5, 2))
abline(v = 0.5, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_1 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta1
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta1_samples <- results$p.beta.recover.samples[, 2]
hist(beta1_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-1.5, 2))
abline(v = 0.5, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_1 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta2
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta2_samples <- results$p.beta.recover.samples[, 3]
hist(beta2_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-2, 1.5),
breaks = 10)
abline(v = -1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_2 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta2
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta2_samples <- results$p.beta.recover.samples[, 3]
hist(beta2_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-1.5, 0),
breaks = 10)
abline(v = -1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_2 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta2
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta2_samples <- results$p.beta.recover.samples[, 3]
hist(beta2_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-1.5, -0.5),
breaks = 10)
abline(v = -1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_2 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta1
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta1_samples <- results$p.beta.recover.samples[, 2]
hist(beta1_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-1.5, 2))
abline(v = 0.5, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_1 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta1
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta1_samples <- results$p.beta.recover.samples[, 2]
hist(beta1_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-0.5, 1))
abline(v = 0.5, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_1 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta0
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta0_samples <- results$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-2.5, 4),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta0
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta0_samples <- results$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(0, 5),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta0
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta0_samples <- results$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(0, 6),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
head(results$p.theta.samples)
# Density plots for tau2
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
tau2_samples <- results$p.theta.samples[, 3]
if (i == 4) {
true_tau2 <- 2
} else {
true_tau2 = 0.2
}
hist(tau2_samples,
xlab = paste0("Scenario ", i),
main = "")
abline(v = true_tau2, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Tau2 Samples", side = 3, line = - 2, outer = TRUE)
}
library(ggplot2)
library(spBayes)
nScen <- 6
nReps <- 10
line.type <- 2
line.width <- 4
# Density plots for beta0
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta0_samples <- results$p.beta.recover.samples[, 1]
hist(beta0_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(0, 6),
breaks = 10)
abline(v = 1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_0 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta1
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta1_samples <- results$p.beta.recover.samples[, 2]
hist(beta1_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-0.5, 1))
abline(v = 0.5, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_1 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for beta2
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
beta2_samples <- results$p.beta.recover.samples[, 3]
hist(beta2_samples,
xlab = paste0("Scenario ", i),
main = "",
xlim = c(-1.5, -0.5),
breaks = 10)
abline(v = -1, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Beta_2 Samples", side = 3, line = - 2, outer = TRUE)
}
# Density plots for tau2
par(mfrow = c(2,3))
for (i in 1:nScen) {
path <- paste0("objects/svc_scen", i, ".RDS")
results <- readRDS(path)
tau2_samples <- results$p.theta.samples[, 3]
if (i == 4) {
true_tau2 <- 2
} else {
true_tau2 = 0.2
}
hist(tau2_samples,
xlab = paste0("Scenario ", i),
main = "")
abline(v = true_tau2, lty = line.type, lwd = line.width, col = "skyblue4")
mtext("Tau2 Samples", side = 3, line = - 2, outer = TRUE)
}
### BOXPLOTS FOR PREDICTIVE DIAGNOSTICS ###
# Get diagnostics (rmse, coverage, length)
rmse <- cvg <- len <- c()
for (i in 1:nScen) {
path <- paste0("objects/small_scen", i, ".RDS")
results <- readRDS(path)
load(paste0("data/small/scen", i, "/test.RData"))
STest <- nrow(test$Z)
nTest <- nrow(test$X)
n <- nrow(train$X)
rmse_vec <- cvg_vec <- len_vec <- numeric(STest)
a <- .05
for (j in 1:STest) {
truth <- test$Y[(nTest*(j-1)+1):(nTest*j), ]
m.3.pred <- spPredict(m.3, pred.covars = cbind(rep(1, nTest), test$X),
pred.coords=test$U + rnorm(50, 0, 0.0001), thin=10,
joint=TRUE, n.omp.threads=4, verbose=FALSE)
preds <- apply(m.3.pred$p.y.predictive.samples, 1, mean)
rmse_vec[j] <- sqrt(mean((truth - preds)^2))
lower <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .025)
upper <- apply(m.3.pred$p.y.predictive.samples, 1, quantile, .975)
cvg_vec[j] <- mean(lower < truth & upper > truth)
len_vec[j] <- mean(upper - lower)
}
rmse <- c(rmse, rmse_vec)
cvg <- c(cvg, cvg_vec)
len <- c(len, len_vec)
}
# Organize data
df <- data.frame(RMSE = rmse,
Coverage = cvg,
Length = len,
Scenario = factor(rep(1:nScen, each = nReps)),
Rep = rep(1:nReps, nScen))
# Interval Coverage
ggplot(df, aes(x = Scenario, y = Coverage, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Coverage (95%)",
x = "", y = "")
# Interval Length
ggplot(df, aes(x = Scenario, y = Length, group = Scenario, fill = Scenario)) +
geom_boxplot() +
theme_bw() +
labs(title = "Interval Length (95%)",
x = "", y = "")
