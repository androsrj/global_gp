Z <- train$Z
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
ZTest <- test$Z
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.05, 0.15, length = K),
tau2 = 0.15)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
nSamples <- length(results$paramSamples[[3]])
pdf("figures/subj1_true.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
library(MBA)
library(fields)
lims <- c(-15, 15)
pdf("figures/subj1_true.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="True Surface, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj1_global.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Global GP, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2_true.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[(nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="True Surface, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2_global.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2, (nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Global GP, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
results <- readRDS("objects/local.RDS")
pdf("figures/subj1_local.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Standard GP, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2_local.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,(nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Standard GP, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Z <- train$Z
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
ZTest <- test$Z
YTest <- test$Y
UTest <- test$U
DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.05, 0.15, length = K),
tau2 = 0.15)
#theta <- runif(9, 0.5, 3)
theta <- trueTheta
results <- readRDS("objects/global.RDS")
nSamples <- length(results$paramSamples[[3]])
lims <- c(-15, 15)
pdf("figures/subj1_true.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="True Surface, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj1_global.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Global GP, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2_true.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[(nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="True Surface, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2_global.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2, (nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Global GP, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
results <- readRDS("objects/local.RDS")
pdf("figures/subj1_local.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Standard GP, Subject 1", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2_local.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,(nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Standard GP, Subject 2", col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2_local.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,(nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Standard GP, Subject 2",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj1_local.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Standard GP, Subject 1",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
results <- readRDS("objects/global.RDS")
lims <- c(-15, 15)
pdf("figures/subj1_true.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="True Surface, Subject 1",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj1_global.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Global GP, Subject 1",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2_true.pdf")
pred.surf <-  mba.surf(cbind(UTest, YTest[(nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="True Surface, Subject 2",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
pdf("figures/subj2_global.pdf")
pred.surf <-  mba.surf(cbind(UTest, results$preds[2, (nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="Global GP, Subject 2",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
dev.off()
setwd("~/research/global_gp")
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
load("data/flood_data.RData")
STrain <- 10
STest <- 5
samp <- sample(1:nrow(inputs), STrain + STest)
stormsTrain <- samp[1:STrain]
samp
stormsTrain
stormsTest
stormsTest <- samp[(STrain+1):(STrain+STest)]
stormsTest
STrain <- 10
STest <- 5
samp <- sample(1:nrow(inputs), STrain + STest)
stormsTrain <- samp[1:STrain]
stormsTest <- samp[(STrain+1):(STrain+STest)]
# Distance matrices (D)
U <- coords[stormsTrain, 1:2]
UTest <- coords[stormsTest, 1:2]
D <- rdist(U)
# Libraries
library(MBA)
library(fields)
# Data
load("data/flood_data.RData")
STrain <- 10
STest <- 5
samp <- sample(1:nrow(inputs), STrain + STest)
stormsTrain <- samp[1:STrain]
stormsTest <- samp[(STrain+1):(STrain+STest)]
# Distance matrices (D)
U <- coords[stormsTrain, 1:2]
UTest <- coords[stormsTest, 1:2]
D <- rdist(U)
DTest <- rdist(UTest)
# Local covariates (X)
n <- 100
nTest <- 20
samp2 <- sample(1:nrow(coords))
train <- samp2[1:n]
test <- samp2[(n+1):(n+nTest)]
X <- as.matrix(rep(1, n), coords$elev_meters[train], ncol=2)
XTest <- as.matrix(rep(1, nTest), coords$elev_meters[test], ncol=2)
# Global covariates (Z)
Z <- inputs[stormsTrain,]
ZTest <- inputs[stormsTest,]
# Response (Y)
Y <- out[stormsTrain, train]
YTest <- out[stormsTest, test]
dim(Z)
dim(ZTest)
dim(Y)
dim(X)
dim(XTest)
gc()
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Z <- train$Z
Y <- train$Y
U <- train$U
D <- train$D
n
nTest
m <- matrix(c(5, 3, 6, 8), 2)
m
matrix(m)
load("data/train.RData")
Y <- train$Y
dim(Y)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
# Libraries
library(MBA)
library(fields)
# Data
load("data/flood_data.RData")
STrain <- 10
STest <- 5
samp <- sample(1:nrow(inputs), STrain + STest)
stormsTrain <- samp[1:STrain]
stormsTest <- samp[(STrain+1):(STrain+STest)]
# Distance matrices (D)
U <- coords[stormsTrain, 1:2]
UTest <- coords[stormsTest, 1:2]
D <- rdist(U)
DTest <- rdist(UTest)
# Local covariates (X)
n <- 100
nTest <- 20
samp2 <- sample(1:nrow(coords))
train <- samp2[1:n]
test <- samp2[(n+1):(n+nTest)]
X <- as.matrix(rep(1, n), coords$elev_meters[train], ncol=2)
XTest <- as.matrix(rep(1, nTest), coords$elev_meters[test], ncol=2)
# Global covariates (Z)
Z <- inputs[stormsTrain,]
ZTest <- inputs[stormsTest,]
# Response (Y)
Y <- matrix(out[stormsTrain, train], ncol = 1)
YTest <- matrix(out[stormsTest, test], ncol = 1)
# Other
K <- 9
propSD <- list(sigma2 = seq(0.05, 0.15, length = K),
tau2 = 0.15)
#theta <- runif(9, 0.5, 3)
theta <- seq(10, 100, length = K)
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 5, nBurn = 1, nThin=2,
model = "full_gp")
dim(X)
dim(Y)
dim(out)
train
stormsTrain
dim(out[stormsTrain, train])
# Response (Y)
Y <- matrix(out[stormsTrain, train], ncol = 1)
dim(Y)
Y
class(out)
# Response (Y)
Y <- matrix(as.matrix(out[stormsTrain, train]), ncol = 1)
YTest <- matrix(as.matrix(out[stormsTest, test]), ncol = 1)
dim(Y)
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 5, nBurn = 1, nThin=2,
model = "full_gp")
dim(YTest)
dim(XTest)
dim(Z)
dim(ZTest)
traceback()
head(inputs)
# Global covariates (Z)
Z <- inputs[stormsTrain,3:4]
ZTest <- inputs[stormsTest,3:4]
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 5, nBurn = 1, nThin=2,
model = "full_gp")
traceback()
dim(Z)
dim(D)
dim(Z)
S=10
n <<- length(Y) / S
n
nTest <<- length(YTest) / STest
nTest
K
basis <<- lapply(1:K, function(k) {
Reduce("rbind", lapply(1:S, \(s) BF[s, k] * diag(n)))
})
dim(basis[[1]])
dim(D)
# Global covariates (Z)
STrain <- 10
STest <- 5
samp <- sample(1:nrow(inputs), STrain + STest)
stormsTrain <- samp[1:STrain]
stormsTest <- samp[(STrain+1):(STrain+STest)]
Z <- inputs[stormsTrain,3:4]
ZTest <- inputs[stormsTest,3:4]
# Local covariates (X)
n <- 100
nTest <- 20
samp2 <- sample(1:nrow(coords))
train <- samp2[1:n]
test <- samp2[(n+1):(n+nTest)]
X <- as.matrix(rep(1, n), coords$elev_meters[train], ncol=2)
XTest <- as.matrix(rep(1, nTest), coords$elev_meters[test], ncol=2)
# Distance matrices (D)
U <- coords[train, 1:2]
UTest <- coords[test, 1:2]
D <- rdist(U)
DTest <- rdist(UTest)
# Response (Y)
Y <- matrix(as.matrix(out[stormsTrain, train]), ncol = 1)
YTest <- matrix(as.matrix(out[stormsTest, test]), ncol = 1)
# Other
K <- 9
propSD <- list(sigma2 = seq(0.05, 0.15, length = K),
tau2 = 0.15)
#theta <- runif(9, 0.5, 3)
theta <- seq(10, 100, length = K)
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 5, nBurn = 1, nThin=2,
model = "full_gp")
m <- matrix(1:4, ncol=1)
m
dim(m)
apply(m, 2, mean)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 5, nBurn = 1, nThin=2,
model = "full_gp")
results
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 5, nBurn = 1, nThin=2,
model = "full_gp")
results
class(1:3)
class(results)
class(c(1.1, 2.3))
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 400, nBurn = 100, nThin=2,
model = "full_gp")
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 5, nBurn = 1, nThin=2,
model = "full_gp")
results
setwd("~/research/global_gp")
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
# Libraries
library(MBA)
library(fields)
# Data
load("data/flood_data.RData")
# Global covariates (Z)
STrain <- 10
STest <- 5
samp <- sample(1:nrow(inputs), STrain + STest)
stormsTrain <- samp[1:STrain]
stormsTest <- samp[(STrain+1):(STrain+STest)]
Z <- inputs[stormsTrain,3:4]
ZTest <- inputs[stormsTest,3:4]
# Local covariates (X)
n <- 100
nTest <- 20
samp2 <- sample(1:nrow(coords))
train <- samp2[1:n]
test <- samp2[(n+1):(n+nTest)]
X <- as.matrix(rep(1, n), coords$elev_meters[train], ncol=2)
XTest <- as.matrix(rep(1, nTest), coords$elev_meters[test], ncol=2)
dim(X)
X <- as.matrix(c(rep(1, n), coords$elev_meters[train]), ncol=2)
XTest <- as.matrix(c(rep(1, nTest), coords$elev_meters[test]), ncol=2)
dim(X)
X <- matrix(c(rep(1, n), coords$elev_meters[train]), ncol=2)
XTest <- matrix(c(rep(1, nTest), coords$elev_meters[test]), ncol=2)
dim(X)
dim(XTest)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
# Distance matrices (D)
U <- coords[train, 1:2]
UTest <- coords[test, 1:2]
D <- rdist(U)
DTest <- rdist(UTest)
# Response (Y)
Y <- matrix(as.matrix(out[stormsTrain, train]), ncol = 1)
YTest <- matrix(as.matrix(out[stormsTest, test]), ncol = 1)
# Other
K <- 9
propSD <- list(sigma2 = seq(0.05, 0.15, length = K),
tau2 = 0.15)
#theta <- runif(9, 0.5, 3)
theta <- seq(10, 100, length = K)
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
theta = theta,
propSD = propSD,
nIter = 20, nBurn = 10, nThin=2,
model = "full_gp")
theta
results$posteriorMeans
results$acceptance
nSamples <- length(results$paramSamples[[3]])
plot(1:nSamples, results$paramSamples[[3]], type="l")
pred.surf <-  mba.surf(cbind(UTest, YTest[1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", zlim = lims, main="True Surface, Subject 1",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="True Surface, Subject 1",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
pred.surf <-  mba.surf(cbind(UTest, results$preds[2,1:nTest]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="Global GP, Subject 1",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="True Surface, Storm 2",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
contour(pred.surf, add=T)
pred.surf <-  mba.surf(cbind(UTest, results$preds[2, (nTest+1):(2*nTest)]), no.X=100, no.Y=100, extend=T)$xyz.est
image.plot(pred.surf, xaxs ="r", yaxs = "r", main="Global GP, Storm 2",
cex.main = 1.5, col = hcl.colors(12, "YlOrRd", rev=TRUE))
nTestSubj <- nrow(test$Z)
abs_error <- cvg <- width <- scores <- crps <- numeric(nTestSubj)
a <- .05
for (i in 1:nTestSubj) {
truth <- YTest[(nTest*(i-1)+1):(i*nTest)]
pred <- results$preds[2, (nTest*(i-1)+1):(i*nTest)]
abs_error[i] <- mean(abs(truth - pred))
lower <- results$preds[1, (nTest*(i-1)+1):(i*nTest)]
upper <- results$preds[3, (nTest*(i-1)+1):(i*nTest)]
cvg[i] <- mean(lower < truth & upper > truth)
width[i] <- mean(upper - lower)
scores[i] <- mean((upper - lower) +
2/a * (lower - truth) * (truth < lower) +
2/a * (truth - upper) * (truth > upper))
predSamples <- t(results$predSamples[(nTest*(i-1)+1):(i*nTest), ])
crps[i] <- mean(energy_score(truth, predSamples))
}
nTestSubj <- nrow(test$Z)
nTestSubj <- nrow(ZTest)
abs_error <- cvg <- width <- scores <- crps <- numeric(nTestSubj)
a <- .05
for (i in 1:nTestSubj) {
truth <- YTest[(nTest*(i-1)+1):(i*nTest)]
pred <- results$preds[2, (nTest*(i-1)+1):(i*nTest)]
abs_error[i] <- mean(abs(truth - pred))
lower <- results$preds[1, (nTest*(i-1)+1):(i*nTest)]
upper <- results$preds[3, (nTest*(i-1)+1):(i*nTest)]
cvg[i] <- mean(lower < truth & upper > truth)
width[i] <- mean(upper - lower)
scores[i] <- mean((upper - lower) +
2/a * (lower - truth) * (truth < lower) +
2/a * (truth - upper) * (truth > upper))
predSamples <- t(results$predSamples[(nTest*(i-1)+1):(i*nTest), ])
crps[i] <- mean(energy_score(truth, predSamples))
}
abs_error
cat(paste0("Mean absolute error: ", round(mean(abs_error), 3), "\n"))
cvg
cat(paste0("Mean coverage: ", round(mean(cvg), 3), "\n"))
width
cat(paste0("Mean width: ", round(mean(width), 3), "\n"))
scores
cat(paste0("Mean interval score: ", round(mean(scores), 3), "\n"))
crps
cat(paste0("Mean CRPS: ", round(mean(crps), 3), "\n"))
