trueTheta <- runif(K, 0.1, 0.5)
trueTau2 <- 0.2
trueBeta <- c(2, 0.5, -1)
# Generate training data
set.seed(mySeed)
#X <- matrix(1, ncol=1, nrow = n)
X <- matrix(runif(n*p, 0, 10), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigf2 = trueSigf2,
thf = trueThf,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
mean(train$Y)
save(train, file = "data/train.RData")
#if(mean(train$Y) < 1.9 | mean(train$Y) > 2.1) {
#	stop("change seed")
#}
set.seed(mySeed)
indexTest <- sample(n, nTest)
U <- train$U[indexTest, ]
# Generate testing data
#set.seed(mySeed)
#XTest <- matrix(1, ncol=1, nrow = nTest)
XTest <- matrix(runif(nTest*p, 0, 10), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigf2 = trueSigf2,
thf = trueThf,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
test$index <- indexTest
save(test, file = "data/test.RData")
save(trueTheta, file = "data/theta.RData")
trueSigma2
trueTheta
dim(train$basis)
train$basis
?write.csv
write.csv(X, "../X.csv")
write.csv(X, "../X.csv", row.names = FALSE, col.names = FALSE)
write.csv(X, "../X.csv", row.names = FALSE, col.names = FALSE)
write.csv(X, "../X.csv", col.names = FALSE)
write.csv(X, "../X.csv", row.names = FALSE, col.names = FALSE)
head(X)
write.csv(train$Y, "../Y.csv", row.names = FALSE, col.names = FALSE)
write.csv(train$U, "../coords.csv", row.names = FALSE, col.names = FALSE)
write.csv(train$basis, "../basis_functions.csv", row.names = FALSE, col.names = FALSE)
write.csv(train$Z, "../Z.csv", row.names = FALSE, col.names = FALSE)
dim(train$basis)
setwd("~/research/global_gp")
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
#Z <- train$Z
Z <- matrix(1, ncol = 2, nrow = nrow(train$Z))
Y <- train$Y
U <- train$U
D <- train$D
XTest <- test$X
#ZTest <- test$Z
ZTest <- matrix(1, ncol = 2, nrow = nrow(test$Z))
YTest <- test$Y
UTest <- test$U
DTest <- test$D
dim(train$Y)
dim(train$X)
head(train$X)
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
head(fullX)
head(fullX, 11)
fullX[500:502,]
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
#B <- as.matrix(c(1,5))
p <- 2
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 100
starting <- list("phi"=3/0.5, "sigma.sq"=50, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(3/1, 3/0.1), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
"sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 500
verbose <- TRUE
m.1 <- spLM(Y~fullX-1, coords=coords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
library(spBayes)
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
#B <- as.matrix(c(1,5))
p <- 2
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 100
starting <- list("phi"=3/0.5, "sigma.sq"=50, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(3/1, 3/0.1), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
"sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 500
verbose <- TRUE
m.1 <- spLM(Y~fullX-1, coords=coords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
dim(coords)
library(spBayes)
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10), %*% train$U
library(spBayes)
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10) %*% train$U
library(spBayes)
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10) %x% train$U
#B <- as.matrix(c(1,5))
p <- 2
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 100
starting <- list("phi"=3/0.5, "sigma.sq"=50, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(3/1, 3/0.1), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
"sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 500
verbose <- TRUE
m.1 <- spLM(Y~fullX-1, coords=fullCoords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
m.1$p.theta.samples
library(spBayes)
library(fields)
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
K <- 9
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10) %x% train$U
#B <- as.matrix(c(1,5))
p <- 2
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 100
starting <- list("phi"=3/0.5, "sigma.sq"=50, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(3/1, 3/0.1), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
"sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 500
verbose <- TRUE
m.1 <- spLM(Y~fullX-1, coords=fullCoords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
m.1 <- spRecover(m.1, start=0.5*n.samples, thin=2)
library(spBayes)
library(fields)
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
K <- 9
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10) %x% train$U
fullXTest <- matrix(1, ncol=1, nrow=10)
#B <- as.matrix(c(1,5))
p <- 2
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 20
starting <- list("phi"=3/0.5, "sigma.sq"=10, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(0.5, 3/0.1), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
#priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
#                 "sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 10
verbose <- TRUE
m.1 <- spLM(Y~fullX-1, coords=fullCoords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
m.1 <- spRecover(m.1, start=0.5*n.samples, thin=2)
library(spBayes)
library(fields)
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
K <- 9
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10) %x% train$U
fullXTest <- matrix(1, ncol=1, nrow=10)
#B <- as.matrix(c(1,5))
p <- 2
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 20
starting <- list("phi"=3/0.5, "sigma.sq"=10, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(0.5, 100), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
#priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
#                 "sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 10
verbose <- TRUE
m.1 <- spLM(Y~fullX-1, coords=fullCoords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
dim(fullCords)
dim(fullCoords)
sd(fullCoords)
library(spBayes)
library(fields)
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
K <- 9
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10) %x% train$U + rnorm(10000, 0, 1/10)
fullXTest <- matrix(1, ncol=1, nrow=10)
#B <- as.matrix(c(1,5))
p <- 2
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 20
starting <- list("phi"=3/0.5, "sigma.sq"=10, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(0.5, 100), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
#priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
#                 "sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 10
verbose <- TRUE
m.1 <- spLM(Y~fullX-1, coords=fullCoords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
library(spBayes)
library(fields)
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
K <- 9
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10) %x% train$U + rnorm(10000, 0, 1/10)
fullXTest <- matrix(1, ncol=1, nrow=10)
#B <- as.matrix(c(1,5))
p <- 2
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 20
starting <- list("phi"=3/0.5, "sigma.sq"=10, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(0.5, 30), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
#priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
#                 "sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 10
verbose <- TRUE
m.1 <- spLM(Y~fullX-1, coords=fullCoords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
m.1 <- spRecover(m.1, start=0.5*n.samples, thin=2)
m.1.pred <- spPredict(m.1, pred.covars=X,
pred.coords=coords,
start=0.5*n.samples)
y.hat <- apply(m.1.pred$p.y.predictive.samples, 1, mean)
quant <- function(x){quantile(x, prob=c(0.025, 0.5, 0.975))}
m.1$p.beta.recover.samples
quant <- function(x){quantile(x, prob=c(0.025, 0.5, 0.975))}
y.quant <- apply(m.1.pred$p.y.predictive.samples, 1, quant)
save(m.1, m.1.pred, y.hat, y.quant, "objects/spLM.RData")
?save
save(m.1, m.1.pred, y.hat, y.quant, file = "objects/spLM.RData")
library(spBayes)
library(fields)
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
K <- 9
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10) %x% train$U + rnorm(10000, 0, 1/10)
fullXTest <- matrix(1, ncol=1, nrow=10)
#B <- as.matrix(c(1,5))
p <- 3
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 20
starting <- list("phi"=3/0.5, "sigma.sq"=10, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(0.5, 30), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
#priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
#                 "sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 10
verbose <- TRUE
m.1 <- spLM(Y~fullX, coords=fullCoords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
testCoords <- matrix(1, ncol=1, nrow=nrow(test$Z)) %x% test$U
dim(testCoords)
test$Z
testCoords <- matrix(1, ncol=1, nrow=nrow(test$Z)) %x% test$U + rnorm(500, 0, 1/10)
m.1.pred <- spPredict(m.1, pred.covars=cbind(matrix(1, ncol=1, nrow=nrow(test$Z), test$X),
m.1.pred <- spPredict(m.1, pred.covars=cbind(matrix(1, ncol=1, nrow=nrow(test$Z)), test$X),
pred.coords=testCoords,
start=0.5*n.samples)
m.1.pred <- spPredict(m.1, pred.covars=cbind(matrix(1, ncol=1, nrow=nrow(test$Z)), test$X),
pred.coords=testCoords,
start=0.5*n.samples)
dim(test$X)
m.1.pred <- spPredict(m.1, pred.covars=cbind(matrix(1, ncol=1, nrow=nrow(test$Z)), fullXTest),
pred.coords=testCoords,
start=0.5*n.samples)
library(spBayes)
library(fields)
load("data/train.RData")
load("data/test.RData")
load("data/theta.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
K <- 9
set.seed(1)
n <- 500
coords <- train$U
X <- train$X
fullX <- matrix(1, ncol=1, nrow=10) %x% train$X
fullCoords <- matrix(1, ncol=1, nrow=10) %x% train$U + rnorm(10000, 0, 1/10)
fullXTest <- matrix(1, ncol=1, nrow=10) %x% test$X
#B <- as.matrix(c(1,5))
p <- 3
sigma.sq <- 2
tau.sq <- 0.1
phi <- 3/0.5
#D <- as.matrix(dist(coords))
#R <- exp(-phi*D)
#w <- rmvn(1, rep(0,n), sigma.sq*R)
#y <- rnorm(n, X%*%B + w, sqrt(tau.sq))
Y <- train$Y
n.samples <- 20
starting <- list("phi"=3/0.5, "sigma.sq"=10, "tau.sq"=1)
tuning <- list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors.1 <- list("beta.Norm"=list(rep(0,p), diag(1000,p)),
"phi.Unif"=c(0.5, 30), "sigma.sq.IG"=c(2, 2),
"tau.sq.IG"=c(2, 0.1))
#priors.2 <- list("beta.Flat", "phi.Unif"=c(3/1, 3/0.1),
#                 "sigma.sq.IG"=c(2, 2), "tau.sq.IG"=c(2, 0.1))
cov.model <- "exponential"
n.report <- 10
verbose <- TRUE
m.1 <- spLM(Y~fullX, coords=fullCoords, starting=starting,
tuning=tuning, priors=priors.1, cov.model=cov.model,
n.samples=n.samples, verbose=verbose, n.report=n.report)
m.1 <- spRecover(m.1, start=0.5*n.samples, thin=2)
nReps <- 10
for (i in 1:6) {
  path <- paste0("objects/small_scen", i, ".RDS")
  results <- readRDS(path)
  load(paste0("data/small/scen", i, "/test.RData"))
  preds <- lapply(1:nReps, \(j) results[[j]]$preds[2,])
  #lower <- lapply(1:nReps, \(j) results[[j]]$preds[1,])
  #upper <- lapply(1:nReps, \(j) results[[j]]$preds[3,])
  #paramMeans <- lapply(1:nReps, \(j) results[[j]]$posteriorMeans)
  #rmse <- lapply(1:nReps, \(j) sqrt(mean((preds[[j]] - test$Y)^2)))
  #rmse
  #cat(paste0("RMSE is ", round(rmse, 3), "\n"))
}

nReps <- 10
for (i in 1:6) {
  path <- paste0("objects/small_scen", i, ".RDS")
  results <- readRDS(path)
  load(paste0("data/small/scen", i, "/test.RData"))
  preds <- lapply(1:nReps, \(j) results[[j]]$preds[2,])
}

i=1
path <- paste0("objects/small_scen", i, ".RDS")
results <- readRDS(path)
load("data/small/scen1/test.RData")
preds <- lapply(1:nReps, \(j) results[[j]]$preds[2,])

i=2
path <- paste0("objects/small_scen", i, ".RDS")
results <- readRDS(path)
preds <- lapply(1:nReps, \(j) results[[j]]$preds[2,])

length(results)
q()
