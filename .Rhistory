#log(Net.migration) +
Gender) * Year,
family = binomial,
control = glmerControl(optCtrl = list(xtol_abs = 1e-6,
ftol_abs = 1e-6)))
table(pisa$Cutoff)
full_log <- glmer(data=pisa, Cutoff ~ (Gender+Year|Country) +
(Urban.population....of.total.population. +
#log(Surface.area..sq..km.) +
#log(Population..total) +
#Life.expectancy.at.birth..total..years. +
#Population.ages.0.14....of.total.population. +
#Unemployment..total....of.total.labor.force...modeled.ILO.estimate. +
#Forest.area....of.land.area. +
#log(GDP.per.capita..current.US..) +
#log(Net.migration) +
Gender) * Year,
family = binomial,
control = glmerControl(optCtrl = list(xtol_abs = 1e-6,
ftol_abs = 1e-6)))
full_log <- glmer(data=pisa, Cutoff ~ (Gender+Year|Country) +
(Urban.population....of.total.population. +
log(Surface.area..sq..km.) +
#log(Population..total) +
#Life.expectancy.at.birth..total..years. +
#Population.ages.0.14....of.total.population. +
Unemployment..total....of.total.labor.force...modeled.ILO.estimate. +
Forest.area....of.land.area. +
#log(GDP.per.capita..current.US..) +
#log(Net.migration) +
Gender),
family = binomial,
control = glmerControl(optCtrl = list(xtol_abs = 1e-6,
ftol_abs = 1e-6)))
full_log <- glmer(data=pisa, Cutoff ~ (Gender+Year|Country) +
(Urban.population....of.total.population. +
log(Surface.area..sq..km.) +
#log(Population..total) +
#Life.expectancy.at.birth..total..years. +
#Population.ages.0.14....of.total.population. +
Unemployment..total....of.total.labor.force...modeled.ILO.estimate. +
Forest.area....of.land.area. #+
#log(GDP.per.capita..current.US..) +
#log(Net.migration) +
) * Year,
family = binomial,
control = glmerControl(optCtrl = list(xtol_abs = 1e-6,
ftol_abs = 1e-6)))
full_log <- glmer(data=pisa, Cutoff ~ (Gender+Year|Country) +
(Urban.population....of.total.population. +
log(Surface.area..sq..km.) +
#log(Population..total) +
#Life.expectancy.at.birth..total..years. +
#Population.ages.0.14....of.total.population. +
Unemployment..total....of.total.labor.force...modeled.ILO.estimate. +
Forest.area....of.land.area. +
#log(GDP.per.capita..current.US..) +
#log(Net.migration) +
Gender) * Year,
family = binomial#,
#control = glmerControl(optCtrl = list(xtol_abs = 1e-6, ftol_abs = 1e-6))
)
full_log <- glmer(data=pisa, Cutoff ~ (Gender|Country) +
(Urban.population....of.total.population. +
log(Surface.area..sq..km.) +
#log(Population..total) +
#Life.expectancy.at.birth..total..years. +
#Population.ages.0.14....of.total.population. +
Unemployment..total....of.total.labor.force...modeled.ILO.estimate. +
Forest.area....of.land.area. +
#log(GDP.per.capita..current.US..) +
#log(Net.migration) +
Gender) * Year,
family = binomial)
full_log <- glmer(data=pisa, Cutoff ~ (Year|Country) +
(Urban.population....of.total.population. +
log(Surface.area..sq..km.) +
#log(Population..total) +
#Life.expectancy.at.birth..total..years. +
#Population.ages.0.14....of.total.population. +
Unemployment..total....of.total.labor.force...modeled.ILO.estimate. +
Forest.area....of.land.area. +
#log(GDP.per.capita..current.US..) +
#log(Net.migration) +
Gender) * Year,
family = binomial)
full_log <- glmer(data=pisa, Cutoff ~ (1|Country) +
(Urban.population....of.total.population. +
log(Surface.area..sq..km.) +
#log(Population..total) +
#Life.expectancy.at.birth..total..years. +
#Population.ages.0.14....of.total.population. +
Unemployment..total....of.total.labor.force...modeled.ILO.estimate. +
Forest.area....of.land.area. +
#log(GDP.per.capita..current.US..) +
#log(Net.migration) +
Gender) * Year,
family = binomial)
summary(full)
summary(full_log)
full_log <- glmer(data=pisa, Cutoff ~ (Gender+Year|Country) +
(Urban.population....of.total.population. +
log(Surface.area..sq..km.) +
#log(Population..total) +
#Life.expectancy.at.birth..total..years. +
#Population.ages.0.14....of.total.population. +
Unemployment..total....of.total.labor.force...modeled.ILO.estimate. +
Forest.area....of.land.area. +
#log(GDP.per.capita..current.US..) +
#log(Net.migration) +
Gender) * Year,
family = binomial)
summary(full_log)
setwd("~/research/nngp")
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- c(0.03, 0.1)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 100,
model = "full_gp",
transform = FALSE)
results$posteriorMeans
results$acceptance
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- c(0.4, 0.2)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 100,
model = "full_gp",
transform = FALSE)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- c(0.2, 0.2)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 100,
model = "full_gp",
transform = FALSE)
results$posteriorMeans
results$acceptance
log(9)
log(1)
log(2)
exp(9)
log(688)
results$posteriorMedians
results$paramSamples
dim(results$paramSamples)
class(results$paramSamples)
length(results$paramSamples)
results$paramSamples[[1]]
dim(results$paramSamples[[1]])
plot(1:150, results$paramSamples[[1]][1,])
results$posteriorMeans
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- c(0.2, 0.2)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 10, nThin=1,
model = "full_gp",
transform = FALSE)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- c(0.2, 0.1)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 10, nThin=1,
model = "full_gp",
transform = FALSE)
results$posteriorMeans
results$acceptance
plot(1:150, results$paramSamples[[1]][1,])
plot(1:290, results$paramSamples[[1]][1,])
dim(results$paramSamples[[1]])
plot(1:300, results$paramSamples[[1]][1,])
plot(1:300, results$paramSamples[[2]])
plot(1:300, results$paramSamples[[1]][9,])
mean(results$paramSamples[[1]][9,1:200])
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- c(0.3, 0.1)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 10, nThin=1,
model = "full_gp",
transform = FALSE)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- c(0.2, 0.1)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 10, nThin=1,
model = "full_gp",
transform = FALSE)
results$posteriorMeans
results$acceptance
plot(1:290, results$paramSamples[[1]][1,])
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- list(sigma2 = seq(0.1, 0.5, length = K),
tau2 = 0.07)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 10, nThin=1,
model = "full_gp",
transform = FALSE)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- list(sigma2 = seq(0.1, 0.3, length = K),
tau2 = 0.07)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 10, nThin=1,
model = "full_gp",
transform = FALSE)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- list(sigma2 = seq(0.05, 0.12, length = K),
tau2 = 0.07)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 10, nThin=1,
model = "full_gp",
transform = FALSE)
results$posteriorMeans
results$acceptance
plot(1:290, results$paramSamples[[1]][1,])
source("other_functions/spatial_data.R")
source("other_functions/bsplines_2_3D.R")
mySeed <- 200
# Sample sizes
n <- 500
nTest <- 10
nSubj <- 10
nTestSubj <- 5
K <- 9
# True parameter values
trueSigma2 <- 1:K
trueTau2 <- 0.2
trueTheta <- runif(K, 1, 10)
trueBeta <- c(2, -1)
p <- length(trueBeta)
# Generate training data
set.seed(mySeed)
X <- matrix(rnorm(n * length(trueBeta)), nrow = n, ncol = length(trueBeta))
X <- X[order(X[ , 1]), ]
train <- spatialData(n = n,
X = X,
K = K,
sigma2 = trueSigma2,
tau2 = trueTau2,
theta = trueTheta,
beta = trueBeta)
save(train, file = "data/train.RData")
# Generate testing data
set.seed(mySeed)
X <- matrix(rnorm(nTest * length(trueBeta)), nrow = nTest, ncol = length(trueBeta))
X <- X[order(X[ , 1]), ]
test <- spatialData(n = nTest,
X = X,
K = K,
sigma2 = trueSigma2,
tau2 = trueTau2,
theta = trueTheta,
beta = trueBeta)
save(test, file = "data/test.RData")
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
load("data/train.RData")
load("data/test.RData")
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X
Y <- train$Y
S <- train$S
D <- train$D
XTest <- test$X
YTest <- test$Y
STest <- test$S
DTest <- test$D
propSD <- list(sigma2 = seq(0.05, 0.12, length = K),
tau2 = 0.07)
K <- 9
results <- mcmc(X = X, Y = Y, D = D, S = S,
K = K,
theta = runif(9, 0.5, 3),
propSD = propSD,
nIter = 300, nBurn = 10, nThin=1,
model = "full_gp",
transform = FALSE)
results$posteriorMeans
results$acceptance
plot(1:290, results$paramSamples[[1]][1,])
