diag(3)
diag(3, 4)
?tcrossprod
setwd("~/research/global_gp")
##### SCENARIO 1 #####
scen <- 1
dir <- paste0("data/small/scen", scen, "/")
train <- readRDS(paste0(dir, "train.RDS"))
test <- readRDS(paste0(dir, "test.RDS"))
dim(train$X)
head(train$X)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
library(MBA)
library(splines)
library(fields)
library(parallel)
library(doParallel)
library(foreach)
nReps <- nCores <- 3
set.seed(999)
run.mcmc <- function(rep) {
results <- mcmc(X = X, Z = Z, Y = Y, D = D, K = K,
starting = starting,
propSD = propSD,
nIter = 4000, nBurn = 1000, nThin=2,
model = "full_gp")
return(results)
}
##### SCENARIO 1 #####
scen <- 1
dir <- paste0("data/small/scen", scen, "/")
train <- readRDS(paste0(dir, "train.RDS"))
test <- readRDS(paste0(dir, "test.RDS"))
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X; XTest <- test$X
Z <- train$Z; ZTest <- test$Z
Y <- train$Y; YTest <- test$Y
U <- train$U; UTest <- test$U
D <- train$D; DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.2, length = K),
theta = seq(0.2, 0.4, length = K),
sigf2 = 0.4,
thf = 1,
tau2 = 0.4)
starting <- list(sigma2 = runif(K, 50, 100),
theta = rep(.25, K),
sigf2 = 7,
thf = 2,
tau2 = 0.3,
beta = c(0, 0, 0))
dim(X)
# Dimensions
S <<- nrow(Z)
n <<- length(Y) / S
STest <<- nrow(ZTest)
nTest <<- length(YTest) / STest
K <<- K
#J <<- matrix(1, nrow = S, ncol = 1)
#JTest <<- matrix(1, nrow = STest, ncol = 1)
A <<- rep(1, S) %x% cbind(matrix(1, nrow = n, ncol = 1), X)
ATest <<- rep(1, STest) %x% cbind(matrix(1, nrow = nTest, ncol = 1), XTest)
p <<- ncol(X)
DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
p
S
dim(D)
dim(X)
q
q <- 3
CB <- lapply(1:q, \(j) sigb2[j] * exp(-thb[j] * D))
sigb2 <- c(1,1,1)
thb <- c(0.1, 0.2, 0.3)
CB <- lapply(1:q, \(j) sigb2[j] * exp(-thb[j] * D))
dim(CB)
length(CB)
CB <- lapply(1:q, \(j) sigb2[j] * exp(-thb[j] * D))
j <- 1
CB <- sigb2[j] * exp(-thb[j] * D)
dim(CB)
dim(X)
CB <- X[ , j] %*% sigb2[j] * exp(-thb[j] * D) %*% t(X[ , j])
j
CB <- X[ , j] %*% (sigb2[j] * exp(-thb[j] * D)) %*% t(X[ , j])
dim(X[,j])
length(X[,j])
thb
CB <- X[ , j] %*% (sigb2[j] * exp(-thb[j] * D))
dim(CB)
CB <- X[ , j] %*% (sigb2[j] * exp(-thb[j] * D)) %*% t(X[ , j])
CB <- X[ , j] %*% (sigb2[j] * exp(-thb[j] * D)) %*% tX[ , j]
CB <- X[ , j] %*% (sigb2[j] * exp(-thb[j] * D)) %*% X[ , j]
CB
CB <- X[ , j] %*% (sigb2[j] * exp(-thb[j] * D))
dim(CB)
CB <- tcrossprod(X[ , j],  (sigb2[j] * exp(-thb[j] * D)))
dim(CB)
CB <- crossprod(X[ , j], (sigb2[j] * exp(-thb[j] * D)))
dim(CB)
CB <- (sigb2[j] * exp(-thb[j] * D))
dim(CB)
CB <- matrix(X[ , j], nrow = n, ncol = n) * (sigb2[j] * exp(-thb[j] * D)) * matrix(X[ , j], nrow = n, ncol = n, byrow = T)
dim(CB)
CB[1:3,1:3]
(sigb2[j] * exp(-thb[j] * D))[1:3, 1:3]
X[1,]
9.4^2
X[2,]
.3654*2.783*9.4
CB <- matrix(X[ , j], nrow = n, ncol = n) * (sigb2[j] * exp(-thb[j] * D)) * matrix(X[ , j], nrow = n, ncol = n, byrow = T)
CB <- lapply(1:q, \(j) matrix(X[ , j], nrow = n, ncol = n) * (sigb2[j] * exp(-thb[j] * D)) * matrix(X[ , j], nrow = n, ncol = n, byrow = T))
lapply(2:q, \(j) matrix(X[ , j-1], nrow = n, ncol = n) * (sigb2[j] * exp(-thb[j] * D)) * matrix(X[ , j-1], nrow = n, ncol = n, byrow = T))
CB <- vector("list", q)
CB[[1]] <- sigb2[1] * exp(-thb[1] * D)
CB[[2:q]] <- lapply(2:q, \(j) matrix(X[ , j-1], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X[ , j-1], nrow = n, ncol = n, byrow = T))
DBFull <- matrix(1, S, S) %x% Reduce("+", CB)
CB[[1]] <- sigb2[1] * exp(-thb[1] * D)
CB[[2:q]] <- lapply(2:q, \(j) matrix(X[ , j-1], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X[ , j-1], nrow = n, ncol = n, byrow = T))
DBFull <- matrix(1, S, S) %x% Reduce("+", CB)
?Reduce
class(CB)
length(CB)
dim(CB[[1]])
dim(CB[[2]])
CB[[2]]
class(CB[[2]])
CB <- lapply(1:p, \(j) matrix(X[ , j], nrow = n, ncol = n) *
(sigb2[j + 1] * exp(-thb[j + 1] * D)) *
matrix(X[ , j], nrow = n, ncol = n, byrow = T))
CB <- list(sigb2[1] * exp(-thb[1] * D), CB)
length(CB)
CB <- lapply(1:p, \(j) matrix(X[ , j], nrow = n, ncol = n) *
(sigb2[j + 1] * exp(-thb[j + 1] * D)) *
matrix(X[ , j], nrow = n, ncol = n, byrow = T))
CB <- c(sigb2[1] * exp(-thb[1] * D), CB)
length(CB)
CB <- lapply(1:p, \(j) matrix(X[ , j], nrow = n, ncol = n) *
(sigb2[j + 1] * exp(-thb[j + 1] * D)) *
matrix(X[ , j], nrow = n, ncol = n, byrow = T))
class(CB)
CB <- c(list(sigb2[1] * exp(-thb[1] * D)), CB)
length(CB)
DBFull <- matrix(1, S, S) %x% Reduce("+", CB)
dim(DBFull)
#DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
#DXTestFull <<- matrix(1, STest, STest) %x% rdist(scale(XTest))
CB <- lapply(1:p, \(j) matrix(X[ , j], nrow = n, ncol = n) *
(sigb2[j + 1] * exp(-thb[j + 1] * D)) *
matrix(X[ , j], nrow = n, ncol = n, byrow = T))
CB <- c(list(sigb2[1] * exp(-thb[1] * D)), CB)
DBFull <<- matrix(1, S, S) %x% Reduce("+", CB)
CBTest
CBTest <- lapply(1:p, \(j) matrix(XTest[ , j], nrow = n, ncol = n) *
(sigb2[j + 1] * exp(-thb[j + 1] * DTest)) *
matrix(XTest[ , j], nrow = n, ncol = n, byrow = T))
CBTest <- c(list(sigb2[1] * exp(-thb[1] * DT)), CB)
DBFull <<- matrix(1, S, S) %x% Reduce("+", CB)
CBTest <- lapply(1:p, \(j) matrix(XTest[ , j], nrow = n, ncol = n) *
(sigb2[j + 1] * exp(-thb[j + 1] * DTest)) *
matrix(XTest[ , j], nrow = n, ncol = n, byrow = T))
CBTest <- lapply(1:p, \(j) matrix(XTest[ , j], nrow = nTest, ncol = nTest) *
(sigb2[j + 1] * exp(-thb[j + 1] * DTest)) *
matrix(XTest[ , j], nrow = nTest, ncol = nTest, byrow = T))
CBTest <- c(list(sigb2[1] * exp(-thb[1] * DT)), CB)
CBTest <- c(list(sigb2[1] * exp(-thb[1] * DTest)), CB)
DBTestFull <<- matrix(1, STest, STest) %x% Reduce("+", CBTest)
CBTest <- lapply(1:p, \(j) matrix(XTest[ , j], nrow = nTest, ncol = nTest) *
(sigb2[j + 1] * exp(-thb[j + 1] * DTest)) *
matrix(XTest[ , j], nrow = nTest, ncol = nTest, byrow = T))
CBTest <- c(list(sigb2[1] * exp(-thb[1] * DTest)), CB)
DBTestFull <<- matrix(1, STest, STest) %x% Reduce("+", CBTest)
Reduce("+", CBTest)
length(CBTest)
CBTest <- lapply(1:p, \(j) matrix(XTest[ , j], nrow = nTest, ncol = nTest) *
(sigb2[j + 1] * exp(-thb[j + 1] * DTest)) *
matrix(XTest[ , j], nrow = nTest, ncol = nTest, byrow = T))
CBTest <- c(list(sigb2[1] * exp(-thb[1] * DTest)), CB)
DBTestFull <<- matrix(1, STest, STest) %x% Reduce("+", CBTest)
CBTest <- lapply(1:p, \(j) matrix(XTest[ , j], nrow = nTest, ncol = nTest) *
(sigb2[j + 1] * exp(-thb[j + 1] * DTest)) *
matrix(XTest[ , j], nrow = nTest, ncol = nTest, byrow = T))
CBTest <- c(list(sigb2[1] * exp(-thb[1] * DTest)), CB)
length(CBTest)
p
CBTest <- lapply(1:p, \(j) matrix(XTest[ , j], nrow = nTest, ncol = nTest) *
(sigb2[j + 1] * exp(-thb[j + 1] * DTest)) *
matrix(XTest[ , j], nrow = nTest, ncol = nTest, byrow = T))
length(CBTest)
CBTest <- lapply(1:p, \(j) matrix(XTest[ , j], nrow = nTest, ncol = nTest) *
(sigb2[j + 1] * exp(-thb[j + 1] * DTest)) *
matrix(XTest[ , j], nrow = nTest, ncol = nTest, byrow = T))
CBTest <- c(list(sigb2[1] * exp(-thb[1] * DTest)), CBTest)
DBTestFull <<- matrix(1, STest, STest) %x% Reduce("+", CBTest)
# SOURCES
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
library(MBA)
library(splines)
library(fields)
##### SCENARIO 1 #####
scen <- 1
dir <- paste0("data/small/scen", scen, "/")
train <- readRDS(paste0(dir, "train.RDS"))
test <- readRDS(paste0(dir, "test.RDS"))
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X; XTest <- test$X
Z <- train$Z; ZTest <- test$Z
Y <- train$Y; YTest <- test$Y
U <- train$U; UTest <- test$U
D <- train$D; DTest <- test$D
K <- 9
propSD <- list(sigma2 = seq(0.1, 0.2, length = K),
theta = seq(0.2, 0.4, length = K),
sigf2 = 0.4,
thf = 1,
tau2 = 0.4)
starting <- list(sigma2 = runif(K, 50, 100),
theta = rep(.25, K),
sigf2 = 7,
thf = 2,
tau2 = 0.3,
beta = c(0, 0, 0))
nIter=40
nBurn=20
nThin=2
model="full_gp"
# Dimensions
S <<- nrow(Z)
n <<- length(Y) / S
STest <<- nrow(ZTest)
nTest <<- length(YTest) / STest
K <<- K
#J <<- matrix(1, nrow = S, ncol = 1)
#JTest <<- matrix(1, nrow = STest, ncol = 1)
A <<- rep(1, S) %x% cbind(matrix(1, nrow = n, ncol = 1), X)
ATest <<- rep(1, STest) %x% cbind(matrix(1, nrow = nTest, ncol = 1), XTest)
p <<- ncol(X)
q <<- p + 1 # for intercept
#DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
#DXTestFull <<- matrix(1, STest, STest) %x% rdist(scale(XTest))
DB <- lapply(1:p, \(j) matrix(X[ , j], nrow = n, ncol = n) *
(sigb2[j + 1] * exp(-thb[j + 1] * D)) *
matrix(X[ , j], nrow = n, ncol = n, byrow = T))
DB <- c(list(sigb2[1] * exp(-thb[1] * D)), DB)
starting <- list(sigma2 = runif(K, 50, 100),
theta = rep(.25, K),
sigf2 = rep(4,3),
thb = rep(2,3),
tau2 = 0.3,
beta = c(0, 0, 0))
starting <- list(sigma2 = runif(K, 50, 100),
theta = rep(.25, K),
sigb2 = rep(4,3),
thb = rep(2,3),
tau2 = 0.3,
beta = c(0, 0, 0))
propSD <- list(sigma2 = seq(0.1, 0.2, length = K),
theta = seq(0.2, 0.4, length = K),
sigb2 = 0.4,
thb = 1,
tau2 = 0.4)
# Dimensions
S <<- nrow(Z)
n <<- length(Y) / S
STest <<- nrow(ZTest)
nTest <<- length(YTest) / STest
K <<- K
#J <<- matrix(1, nrow = S, ncol = 1)
#JTest <<- matrix(1, nrow = STest, ncol = 1)
A <<- rep(1, S) %x% cbind(matrix(1, nrow = n, ncol = 1), X)
ATest <<- rep(1, STest) %x% cbind(matrix(1, nrow = nTest, ncol = 1), XTest)
p <<- ncol(X)
q <<- p + 1 # for intercept
#DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
#DXTestFull <<- matrix(1, STest, STest) %x% rdist(scale(XTest))
DB <- lapply(1:p, \(j) matrix(X[ , j], nrow = n, ncol = n) *
(sigb2[j + 1] * exp(-thb[j + 1] * D)) *
matrix(X[ , j], nrow = n, ncol = n, byrow = T))
#DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
#DXTestFull <<- matrix(1, STest, STest) %x% rdist(scale(XTest))
DB <- lapply(1:p, \(j) matrix(X[ , j], nrow = n, ncol = n) *
(starting$sigb2[j + 1] * exp(-starting$thb[j + 1] * D)) *
matrix(X[ , j], nrow = n, ncol = n, byrow = T))
DB <- c(list(sigb2[1] * exp(-thb[1] * D)), DB)
CBFull <<- matrix(1, S, S) %x% Reduce("+", DB)
#DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
#DXTestFull <<- matrix(1, STest, STest) %x% rdist(scale(XTest))
DB <- lapply(1:p, \(j) matrix(X[ , j], nrow = n, ncol = n) *
(starting$sigb2[j + 1] * exp(-starting$thb[j + 1] * D)) *
matrix(X[ , j], nrow = n, ncol = n, byrow = T))
DB <- c(list(starting$sigb2[1] * exp(-starting$thb[1] * D)), DB)
CBFull <<- matrix(1, S, S) %x% Reduce("+", DB)
DBTest <- lapply(1:p, \(j) matrix(XTest[ , j], nrow = nTest, ncol = nTest) *
(starting$sigb2[j + 1] * exp(-starting$thb[j + 1] * DTest)) *
matrix(XTest[ , j], nrow = nTest, ncol = nTest, byrow = T))
DBTest <- c(list(starting$sigb2[1] * exp(-starting$thb[1] * DTest)), DBTest)
CBTestFull <<- matrix(1, STest, STest) %x% Reduce("+", DBTest)
dim(CBFull)
dim(CBTestFull)
# Save model type and theta globally
model <<- model
#theta <<- theta
BF <- Bsplines_2D(Z, df = c(sqrt(K), sqrt(K)))
basis <<- lapply(1:K, function(k) {
Reduce("rbind", lapply(1:S, \(s) BF[s, k] * diag(n)))
})
BFTest <- Bsplines_2D(ZTest, df = c(sqrt(K), sqrt(K)))
basisTest <<- lapply(1:K, function(k) {
Reduce("rbind", lapply(1:STest, \(s) BFTest[s, k] * diag(nTest)))
})
# MCMC chain properties
nIter <- nBurn + nIter # 15 to 20 thousand ideally
# Tuning parameters for variance of each proposal distribution
# Can be user-supplied
sdSigb2 <- propSD$sigb2
sdThb <- propSD$thb
sdSigma2 <- propSD$sigma2
sdTheta <- propSD$theta
sdTau2 <- propSD$tau2
# Initialize vectors for MCMC
trSigma2 <- trTheta <- matrix(0, nrow = K, ncol = nIter)
trThb <- trSigb2 <- matrix(0, nrow = q, ncol = nIter)
nIter
q
q <<- p + 1 # for intercept
q <<- p + 1 # for intercept
# Initialize vectors for MCMC
trSigma2 <- trTheta <- matrix(0, nrow = K, ncol = nIter)
trThb <- trSigb2 <- matrix(0, nrow = p+1, ncol = nIter)
trTau2 <- numeric(nIter) # Transformed parameters
beta <- matrix(0, nrow = p+1, ncol = nIter)
acceptTau2 <- 0 # Track acceptance rates
acceptSigma2 <- 0
acceptSigb2 <- 0
acceptTheta <- 0
acceptThb <- 0
# Initial values of transformed parameters (except for beta, not transformed)
trSigma2[, 1] <- log(starting$sigma2)
trTheta[, 1] <- g(starting$theta)
trSigb2[, 1] <- log(starting$sigb2)
trThb[, 1] <- g(starting$thb)
trTau2[1] <- log(starting$tau2)
beta[ , 1] <- starting$beta
# Base of covariance matrix for updating sigma2 and tau2
B <<- baseVariance(theta = starting$theta, D = D)
Sigma <<- Reduce("+", lapply(1:K, \(k) starting$sigma2[k] * B[[k]])) +
DBFull +
#starting$sigb2 * exp(-starting$thb * DXFull) +
starting$tau2 * diag(n * S)
Sigma <<- Reduce("+", lapply(1:K, \(k) starting$sigma2[k] * B[[k]])) +
CBFull +
#starting$sigb2 * exp(-starting$thb * DXFull) +
starting$tau2 * diag(n * S)
# Base of covariance matrix for predictions
BTest <- lapply(1:K, \(k) tcrossprod(basisTest[[k]] %*% exp(-starting$theta[k] * DTest), basisTest[[k]]))
SigmaTest <<- Reduce("+", lapply(1:K, function(k) {
starting$sigma2[k] * BTest[[k]]
})) +
CBTestFull +
#starting$sigb2 * exp(-starting$thb * DXTestFull) +
starting$tau2 * diag(STest * nTest)
#DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
#DXTestFull <<- matrix(1, STest, STest) %x% rdist(scale(XTest))
DB <- lapply(1:(p+1), matrix(X0[ , j], nrow = n, ncol = n) *
(starting$sigb2[j] * exp(-starting$thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
X0 <- cbind(rep(1, n), X)
X0Test <- cbind(rep(1, nTest), XTest)
#DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
#DXTestFull <<- matrix(1, STest, STest) %x% rdist(scale(XTest))
DB <- lapply(1:(p+1), matrix(X0[ , j], nrow = n, ncol = n) *
(starting$sigb2[j] * exp(-starting$thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
#DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
#DXTestFull <<- matrix(1, STest, STest) %x% rdist(scale(XTest))
DB <- lapply(1:(p+1), \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(starting$sigb2[j] * exp(-starting$thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
dim(DB)
length(DB)
dim(DB[[1]])
#DXFull <<- matrix(1, S, S) %x% rdist(scale(X))
#DXTestFull <<- matrix(1, STest, STest) %x% rdist(scale(XTest))
DB <- lapply(1:(p+1), \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(starting$sigb2[j] * exp(-starting$thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CBFull <<- matrix(1, S, S) %x% Reduce("+", DB)
DBTest <- DB <- lapply(1:(p+1), \(j) matrix(X0Test[ , j], nrow = n, ncol = n) *
(starting$sigb2[j] * exp(-starting$thb[j] * DTest)) *
matrix(X0Test[ , j], nrow = n, ncol = n, byrow = T))
CBTestFull <<- matrix(1, STest, STest) %x% Reduce("+", DBTest)
DBTest <- DB <- lapply(1:(p+1), \(j) matrix(X0Test[ , j], nrow = nTest, ncol = nTest) *
(starting$sigb2[j] * exp(-starting$thb[j] * DTest)) *
matrix(X0Test[ , j], nrow = nTest, ncol = nTest, byrow = T))
CBTestFull <<- matrix(1, STest, STest) %x% Reduce("+", DBTest)
