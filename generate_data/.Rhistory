tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
source("../other_functions/spatial_data.R")
source("../other_functions/bsplines_2_3D.R")
mySeed <- 45213
# Sample sizes
# Can have a "small" dataset with n = 100 and nTest = 25
# Then a "large" dataset with n = 500 and nTest = 100
n <- 100
nTest <- 25
# Number of subjects - can probably leave these alone
S <- 10
STest <- 10
# Number of BFE's and predictors - leave these alone
K <- 9
p <- 2
### True parameter values ###
# Need to play around with these
# Covariance parameters for beta
trueSigb2 <- seq(3, 5, length = p + 1)
trueThb <- seq(50, 100, length = p + 1)
# Covariance parameters for global covariates (each length K)
trueSigma2 <- seq(50, 100, length = K)
trueTheta <- runif(K, 0.1, 0.5)
# Error variance
trueTau2 <- 0.2
# Regression coefficients
trueBeta <- c(1, 0.5, -1)
##########################
# Generate training data #
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 10), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(train$Y)
source("../other_functions/spatial_data.R")
source("../other_functions/bsplines_2_3D.R")
mySeed <- 45213
# Sample sizes
# Can have a "small" dataset with n = 100 and nTest = 25
# Then a "large" dataset with n = 500 and nTest = 100
n <- 100
nTest <- 25
# Number of subjects - can probably leave these alone
S <- 10
STest <- 10
# Number of BFE's and predictors - leave these alone
K <- 9
p <- 2
# Covariance parameters for beta
trueSigb2 <- seq(3, 5, length = p + 1)
trueThb <- seq(0.5, 1.5, length = p + 1)
# Covariance parameters for global covariates (each length K)
trueSigma2 <- seq(50, 100, length = K)
trueTheta <- runif(K, 0.1, 0.5)
# Error variance
trueTau2 <- 0.2
# Regression coefficients
trueBeta <- c(1, 0.5, -1)
##########################
# Generate training data #
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 10), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
sigb2=trueSigb2
thb=trueThb
sigma2=trueSigma2
theta=trueTheta
tau2=trueTau2
beta=trueBeta
range=c(0,100)
dims=2
eps=1e-6
locations <- runif(n * dims, range[1], range[2])
U <- matrix(locations, nrow = n, ncol = dims)
# Order U by sum of coordinates
U <- U[order(rowSums(U)), ]
D <- rdist(U)
C <- lapply(1:K, function(k) {
sigma2[k] * exp(-theta[k] * D)
})
# Sample h
eta <- sapply(1:K, function(k) {
t(rmvnorm(1, sigma = C[[k]]))
})
basis <- Bsplines_2D(Z, df = c(sqrt(K), sqrt(K)))
S <- nrow(Z)
h <- c(sapply(1:S, \(i) rowSums(sapply(1:K, \(k) basis[i, k] * eta[ , k]))))
# Sample beta
n <- nrow(X)
X0 <- cbind(rep(1, n), X)
q <- ncol(X0)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% (X0 %*% beta)
dim(CB)
dim(B)
CB[1:5,1:5]
t(rmvnorm(q, sigma = CB))
t(rmvnorm(q, sigma = CB))
t(rmvnorm(q, sigma = CB))
t(rmvnorm(q, sigma = CB))
t(rmvnorm(q, sigma = CB))
beta
thb
thb <- c(0.001, 0.002, 0.003)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
CB[1:5,1:5]
q <- ncol(X0)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% (X0 %*% beta)
# Generate Y
Y <- XB + h + rnorm(n * S, 0, sqrt(tau2))
sd(Y)
thb <- c(4,5,6)
q <- ncol(X0)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% (X0 %*% beta)
# Generate Y
Y <- XB + h + rnorm(n * S, 0, sqrt(tau2))
sd(Y)
var(h)
dim(XB)
var(XB)
var(rnorm(n * S, 0, sqrt(tau2))
)
sd(h)
sd(XB)
sqrt(11.4+0.22+4.42)
sd(Y)
dim(B)
dim(X0%*%beta)
dim(X0%*%bB)
dim(X0%*%B)
dim(X0)
dim(B)
dim(X0)
dim(B)
dim(X0 * B)
dim(rowSums(X0 * B))
rowSums(X0*B)
length(rowSums(X0 * B))
q <- ncol(X0)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * beta)
# Generate Y
Y <- XB + h + rnorm(n * S, 0, sqrt(tau2))
sd(Y)
thb
thb <- c(0.1, 0.2, 0.3)
q <- ncol(X0)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * beta)
# Generate Y
Y <- XB + h + rnorm(n * S, 0, sqrt(tau2))
sd(Y)
thb
thb <- c(0.0001, 0.0002, 0.0003)
q <- ncol(X0)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * beta)
# Generate Y
Y <- XB + h + rnorm(n * S, 0, sqrt(tau2))
sd(Y)
q <- ncol(X0)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * B)
# Generate Y
Y <- XB + h + rnorm(n * S, 0, sqrt(tau2))
sd(Y)
thb
thb <- c(0.1, 0.2, 0.3)
q <- ncol(X0)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * B)
# Generate Y
Y <- XB + h + rnorm(n * S, 0, sqrt(tau2))
sd(Y)
dim(XB)
length(XB)
XB
class(XB)
thb <- 8:10
q <- ncol(X0)
DB <- lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CB <- Reduce("+", DB)
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * B)
# Generate Y
Y <- XB + h + rnorm(n * S, 0, sqrt(tau2))
sd(Y)
sigb2
range(D)
CB
max(CB)
diag(CB)
hist(diag(CB))
q <- ncol(X0)
CB <- lapply(1:q, \(j) sigb2[j] * exp(-thb[j] * D))
CXB <- Reduce("+", lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) * CB[[j]] *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T)))
B <- t(rmvnorm(q, sigma = CB)) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * B)
q <- ncol(X0)
CB <- lapply(1:q, \(j) sigb2[j] * exp(-thb[j] * D))
CXB <- Reduce("+", lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) * CB[[j]] *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T)))
dim(CB)
CB
dim(CB[[1]])
B <- Reduce("cbind", lapply(1:q, \(j) t(rmvnorm(1, sigma = CB[[j]])))) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
dim(B)
q <- ncol(X0)
CB <- lapply(1:q, \(j) sigb2[j] * exp(-thb[j] * D))
CXB <- Reduce("+", lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) * CB[[j]] *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T)))
B <- Reduce("cbind", lapply(1:q, \(j) t(rmvnorm(1, sigma = CB[[j]])))) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * B)
# Final covariance matrix for Y
Sigma <- rep(1, S) %x% CXB + C + rnorm(n * S, 0, sqrt(tau2))
dim(CXB)
dim( rep(1, S) %x% CXB)
# Final covariance matrix for Y
Sigma <- matrix(1, S, S) %x% CXB + C + rnorm(n * S, 0, sqrt(tau2))
dim(C)
C
class(C)
dim(matrix(1, S, S) %x% CXB)
sd(matrix(1, S, S) %x% CXB)
sd(diag(CXB))
mean(diag(CXB))
thb
library(Matrix)
?bdiag
dim(eta)
dim(basis)
dim(h)
length(h)
dim(basis)
basis[dim(C[[1]])]
dim(C[[1]])
dim(eta)
basis <- lapply(1:K, function(k) {
Reduce("rbind", lapply(1:S, \(s) BF[s, k] * diag(n)))
})
BF <- Bsplines_2D(Z, df = c(sqrt(K), sqrt(K)))
S <- nrow(Z)
h <- c(sapply(1:S, \(i) rowSums(sapply(1:K, \(k) BF[i, k] * eta[ , k]))))
basis <- lapply(1:K, function(k) {
Reduce("rbind", lapply(1:S, \(s) BF[s, k] * diag(n)))
})
B <- lapply(1:K, \(k) tcrossprod(basis[[k]] %*% exp(-starting$theta[k] * DTest), basis[[k]]))
B <- lapply(1:K, \(k) tcrossprod(basis[[k]] %*% exp(-theta[k] * DTest), basis[[k]]))
B <- lapply(1:K, \(k) tcrossprod(basis[[k]] %*% C[[k]], basis[[k]]))
length(B)
dim(B[[1]])
dim(basis)
dim(basis[[1]])
length(B)
dim(BF)
dim(basis[[1]])
dim(B)
dim(B[[1]])
length(B)
dim(BF)
BF[1,1]
BF
B <- lapply(1:S, \(s) Reduce("+", lapply(1:K, \(k) BF[s, k]^2 * C[[k]])))
length(B)
dim(B[[1]])
C.eta <- bdiag()B
C.eta <- bdiag(B)
dim(C.eta)
BF <- Bsplines_2D(Z, df = c(sqrt(K), sqrt(K)))
S <- nrow(Z)
h <- c(sapply(1:S, \(i) rowSums(sapply(1:K, \(k) BF[i, k] * eta[ , k]))))
#basis <- lapply(1:K, function(k) {
#  Reduce("rbind", lapply(1:S, \(s) BF[s, k] * diag(n)))
#})
#B <- lapply(1:K, \(k) tcrossprod(basis[[k]] %*% C[[k]], basis[[k]]))
B <- lapply(1:S, \(s) Reduce("+", lapply(1:K, \(k) BF[s, k]^2 * C[[k]])))
C.eta <- bdiag(B)
# Covariance - beta
n <- nrow(X)
X0 <- cbind(rep(1, n), X)
CB <- lapply(1:q, \(j) sigb2[j] * exp(-thb[j] * D))
CXB <- Reduce("+", lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) * CB[[j]] *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T)))
B <- Reduce("cbind", lapply(1:q, \(j) t(rmvnorm(1, sigma = CB[[j]])))) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * B)
# Final covariance matrix for Y
Sigma <- matrix(1, S, S) %x% CXB + C.eta + rnorm(n * S, 0, sqrt(tau2))
# Generate Y
Y <- t(rmvnorm(1, XB, Sigma))
dim(Sigma)
min(Sigma)
min(diag(Sigma))
mean(diag(Sigma))
sd(Y)
thb <- c(0.01, 0.02, 0.03)
q <- ncol(X0)
CB <- lapply(1:q, \(j) sigb2[j] * exp(-thb[j] * D))
CXB <- Reduce("+", lapply(1:q, \(j) matrix(X0[ , j], nrow = n, ncol = n) * CB[[j]] *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T)))
B <- Reduce("cbind", lapply(1:q, \(j) t(rmvnorm(1, sigma = CB[[j]])))) + matrix(beta, nrow = n, ncol = q, byrow = TRUE)
XB <- rep(1, S) %x% rowSums(X0 * B)
# Final covariance matrix for Y
Sigma <- matrix(1, S, S) %x% CXB + C.eta + rnorm(n * S, 0, sqrt(tau2))
# Generate Y
Y <- t(rmvnorm(1, XB, Sigma))
mean(diag(Sigma))
t(rmvnorm(1, XB, matrix(1, S, S) %x% CXB))
t(rmvnorm(1, XB, CXB))
dim(XB)
dim(CXB)
t(rmvnorm(1, XB, matrix(1, S, S) %x% CXB))
t(rmvnorm(1, XB, C.eta))
dim(C.eta)
length(rnorm(n * S, 0, sqrt(tau2))
)
dim(diag(rnorm(n*S, 0, sqrt(tau2))))
# Final covariance matrix for Y
Sigma <- matrix(1, S, S) %x% CXB + C.eta + diag(rnorm(n * S, 0, sqrt(tau2)))
# Generate Y
Y <- t(rmvnorm(1, XB, Sigma))
tau2=100
# Final covariance matrix for Y
Sigma <- matrix(1, S, S) %x% CXB + C.eta + diag(rnorm(n * S, 0, sqrt(tau2)))
# Generate Y
Y <- t(rmvnorm(1, XB, Sigma))
tau2=0.2
dim(XB)
rmvnorm(1, XB, diag(1000))
rmvnorm(1, XB, diag(rnorm(n * S, 0, sqrt(tau2))))
n*S
sqrt(tau2)
rmvnorm(1, XB, diag(1000))
rmvnorm(1, XB, diag(rnorm(n * S, 0, 100))
)
rmvnorm(1, XB, diag(rnorm(n * S, 0, 1000)))
rmvnorm(1, 0, diag(rnorm(n * S, 0, 1000)))
rmvnorm(1, 0, sigma = diag(rnorm(n * S, 0, 1000)))
rmvnorm(1, 0, sigma = diag(1000))
rmvnorm(1, sigma = C.eta)
