# Correlations between y's
cor(resp)
# Correlations between x's
cor(expl)
# Correlations between y's and x's
cor(resp$sPositive, expl)
# Correlations between y's
cor(resp)
# Regression models for sPositive, sAttended, and sUpToDate
pos <- lm(resp$sPositive ~ expl)
# Regression models for sPositive, sAttended, and sUpToDate
df1 <- data.frame(sPositive = resp$sPositive, expl)
# Regression models for sPositive, sAttended, and sUpToDate
df1 <- data.frame(sPositive = resp$sPositive, expl)
pos <- lm(data = df1, sPositive ~ .)
head(df1)
summary(pos)
hist(resid(pos))
plot(pos)
df2 <- data.frame(sAttended = resp$sAttended, expl)
att <- lm(data = df1, sAttended ~ .)
summary(att)
df2 <- data.frame(sAttended = resp$sAttended, expl)
att <- lm(data = df2, sAttended ~ .)
summary(att)
plot(att)
df3 <- data.frame(sUpToDate = resp$sUpToDate, expl)
utd <- lm(data = df3, sUpToDate ~ .)
summary(utd)
# Correlations between y's
cor(resp)
# Principle component analysis
pca(resp)
# Principle component analysis
princomp(resp)
# Principle component analysis
pca <- princomp(resp)
?princomp
pca$center
summary(pca)
pca$loadings
install.packages("CCA")
library(CCA)
?cc
cc(expl, resp)
cancor <- cc(expl, resp)
summary(cancor)
cancor
cancor$cor
cancor$cor
library(GGally)
# Correlations between y's
ggpairs(resp)
cor(resp)
# Correlations between y's and x's
cor(resp$sPositive, expl)
cor(resp$sAttended, expl)
# Correlations between y's and x's
correlations_spositive <- cor(resp$sPositive, expl)
barplot(correlations_spositive)
table(data$CourseType)
library(ggplot2)
# Boxplot for different course types
ggplot(data = data, mapping = aes(x = Type, y = sPositive, fill = Type)) +
geom_boxplot()
# Boxplot for different course types
ggplot(data = data, mapping = aes(x = CourseType, y = sPositive, fill = CourseType)) +
geom_boxplot()
# Boxplot for different course types
ggplot(data = data, mapping = aes(group = CourseType, y = sPositive, fill = CourseType)) +
geom_boxplot()
# Boxplot for different course types
ggplot(data = data, mapping = aes(group = CourseType, y = sAttended, fill = CourseType)) +
geom_boxplot()
# Boxplot for different course types
ggplot(data = data, mapping = aes(group = CourseType, y = sPrepared, fill = CourseType)) +
geom_boxplot()
sort(data$sPositive)
sort(data$sAttended)
m <- matrix(1:4, 2, 2)
m
det(m)
det(3*m)
3^2*det(m)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(kableExtra)
library(ggplot2)
file_path <- "~/Desktop/Project 4/LeeDataFungalMorphogenesis.csv"
data <- read.csv(file_path)
setwd("C:/Users/andro/Downloads")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(kableExtra)
library(ggplot2)
file_path <- "~/Desktop/Project 4/LeeDataFungalMorphogenesis.csv"
data <- read.csv(file_path)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(kableExtra)
library(ggplot2)
file_path <- "LeeDataFungalMorphogenesis.csv"
data <- read.csv(file_path)
colnames(data)
# Rename specific columns using rename() from dplyr
data <- data %>%
rename(
Treatment = "Pos..Control..No.Rx...A..A.SA..B..B.SB..combination.of.A.and.B..combination.of.SA.and.SB",
Replicate = "Replicate",
Tube = "Slide..tube.....for.use.in.lab.",
ResponseNoChange = "Response..No.change.in.morphology..No.GT..PH.or.buds.",
ResponseGT = "Response..GT..germtubes..only",
ResponsePH = "Response..Pseudohypha..PH..only",
ResponseBuds = "Response..Buds.only",
ResponseGTPH = "Response..GT...PH",
ResponseGTBuds = "Response..GT...Buds",
ResponsePHBuds = "Response..PH...Buds",
ResponseGTMultiple = "Response...1.GTs.multiple.GTs."
)
head(data)
# Calculate proportions for each response variable based on 200 total cells per replicate
data <- data %>%
mutate(ResponseNoChangeProp = ResponseNoChange / 200,
ResponseGTProp = ResponseGT / 200,
ResponsePHProp = ResponsePH / 200,
ResponseBudsProp = ResponseBuds / 200,
ResponseGTPHProp = ResponseGTPH / 200,
ResponseGTBudsProp = ResponseGTBuds / 200,
ResponsePHBudsProp = ResponsePHBuds / 200,
ResponseGTMultipleProp = ResponseGTMultiple / 200)
# Summarize mean and standard deviation of the proportions across replicates for each treatment
summary_data <- data %>%
group_by(Treatment) %>%
summarise(MeanResponseGT = mean(ResponseGTProp),
SDResponseGT = sd(ResponseGTProp),
MeanResponseNoChange = mean(ResponseNoChangeProp),
SDResponseNoChange = sd(ResponseNoChangeProp),
MeanResponsePH = mean(ResponsePHProp),
SDResponsePH = sd(ResponsePHProp),
MeanResponseBuds = mean(ResponseBudsProp),
SDResponseBuds = sd(ResponseBudsProp),
MeanResponseGTPH = mean(ResponseGTPHProp),
SDResponseGTPH = sd(ResponseGTPHProp),
MeanResponseGTBuds = mean(ResponseGTBudsProp),
SDResponseGTBuds = sd(ResponseGTBudsProp),
MeanResponsePHBuds = mean(ResponsePHBudsProp),
SDResponsePHBuds = sd(ResponsePHBudsProp),
MeanResponseGTMultiple = mean(ResponseGTMultipleProp),
SDResponseGTMultiple = sd(ResponseGTMultipleProp))
# Print the summary table in a pretty format using kableExtra
summary_data %>%
kable(align = "c", format = "html",
col.names = c("Treatment", "Mean GT", "SD GT", "Mean No Change", "SD No Change", "Mean PH", "SD PH",
"Mean Buds", "SD Buds", "Mean GT + PH", "SD GT + PH", "Mean GT + Buds", "SD GT + Buds",
"Mean PH + Buds", "SD PH + Buds", "Mean >1 GT", "SD >1 GT")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
add_header_above(c(" " = 1, "Hyphae (GT)" = 2, "No Change" = 2, "Pseudohypha (PH)" = 2, "Buds" = 2,
"GT + PH" = 2, "GT + Buds" = 2, "PH + Buds" = 2, "> 1 GT" = 2))
# Reshape data to long format to include all response categories
long_summary_data <- summary_data %>%
select(Treatment, MeanResponseGT, MeanResponseNoChange, MeanResponsePH, MeanResponseBuds,
MeanResponseGTPH, MeanResponseGTBuds, MeanResponsePHBuds, MeanResponseGTMultiple) %>%
pivot_longer(cols = starts_with("Mean"), names_to = "ResponseType", values_to = "Proportion") %>%
mutate(ResponseType = recode(ResponseType,
"MeanResponseGT" = "Hyphae (GT)",
"MeanResponseNoChange" = "No GT, No PH, No Buds",
"MeanResponsePH" = "Pseudohypha (PH)",
"MeanResponseBuds" = "Buds",
"MeanResponseGTPH" = "GT + PH",
"MeanResponseGTBuds" = "GT + Buds",
"MeanResponsePHBuds" = "PH + Buds",
"MeanResponseGTMultiple" = "> 1 GT"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(kableExtra)
library(ggplot2)
library(tidyr)
file_path <- "LeeDataFungalMorphogenesis.csv"
data <- read.csv(file_path)
colnames(data)
# Rename specific columns using rename() from dplyr
data <- data %>%
rename(
Treatment = "Pos..Control..No.Rx...A..A.SA..B..B.SB..combination.of.A.and.B..combination.of.SA.and.SB",
Replicate = "Replicate",
Tube = "Slide..tube.....for.use.in.lab.",
ResponseNoChange = "Response..No.change.in.morphology..No.GT..PH.or.buds.",
ResponseGT = "Response..GT..germtubes..only",
ResponsePH = "Response..Pseudohypha..PH..only",
ResponseBuds = "Response..Buds.only",
ResponseGTPH = "Response..GT...PH",
ResponseGTBuds = "Response..GT...Buds",
ResponsePHBuds = "Response..PH...Buds",
ResponseGTMultiple = "Response...1.GTs.multiple.GTs."
)
head(data)
# Calculate proportions for each response variable based on 200 total cells per replicate
data <- data %>%
mutate(ResponseNoChangeProp = ResponseNoChange / 200,
ResponseGTProp = ResponseGT / 200,
ResponsePHProp = ResponsePH / 200,
ResponseBudsProp = ResponseBuds / 200,
ResponseGTPHProp = ResponseGTPH / 200,
ResponseGTBudsProp = ResponseGTBuds / 200,
ResponsePHBudsProp = ResponsePHBuds / 200,
ResponseGTMultipleProp = ResponseGTMultiple / 200)
# Summarize mean and standard deviation of the proportions across replicates for each treatment
summary_data <- data %>%
group_by(Treatment) %>%
summarise(MeanResponseGT = mean(ResponseGTProp),
SDResponseGT = sd(ResponseGTProp),
MeanResponseNoChange = mean(ResponseNoChangeProp),
SDResponseNoChange = sd(ResponseNoChangeProp),
MeanResponsePH = mean(ResponsePHProp),
SDResponsePH = sd(ResponsePHProp),
MeanResponseBuds = mean(ResponseBudsProp),
SDResponseBuds = sd(ResponseBudsProp),
MeanResponseGTPH = mean(ResponseGTPHProp),
SDResponseGTPH = sd(ResponseGTPHProp),
MeanResponseGTBuds = mean(ResponseGTBudsProp),
SDResponseGTBuds = sd(ResponseGTBudsProp),
MeanResponsePHBuds = mean(ResponsePHBudsProp),
SDResponsePHBuds = sd(ResponsePHBudsProp),
MeanResponseGTMultiple = mean(ResponseGTMultipleProp),
SDResponseGTMultiple = sd(ResponseGTMultipleProp))
# Print the summary table in a pretty format using kableExtra
summary_data %>%
kable(align = "c", format = "html",
col.names = c("Treatment", "Mean GT", "SD GT", "Mean No Change", "SD No Change", "Mean PH", "SD PH",
"Mean Buds", "SD Buds", "Mean GT + PH", "SD GT + PH", "Mean GT + Buds", "SD GT + Buds",
"Mean PH + Buds", "SD PH + Buds", "Mean >1 GT", "SD >1 GT")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
add_header_above(c(" " = 1, "Hyphae (GT)" = 2, "No Change" = 2, "Pseudohypha (PH)" = 2, "Buds" = 2,
"GT + PH" = 2, "GT + Buds" = 2, "PH + Buds" = 2, "> 1 GT" = 2))
# Reshape data to long format to include all response categories
long_summary_data <- summary_data %>%
select(Treatment, MeanResponseGT, MeanResponseNoChange, MeanResponsePH, MeanResponseBuds,
MeanResponseGTPH, MeanResponseGTBuds, MeanResponsePHBuds, MeanResponseGTMultiple) %>%
pivot_longer(cols = starts_with("Mean"), names_to = "ResponseType", values_to = "Proportion") %>%
mutate(ResponseType = recode(ResponseType,
"MeanResponseGT" = "Hyphae (GT)",
"MeanResponseNoChange" = "No GT, No PH, No Buds",
"MeanResponsePH" = "Pseudohypha (PH)",
"MeanResponseBuds" = "Buds",
"MeanResponseGTPH" = "GT + PH",
"MeanResponseGTBuds" = "GT + Buds",
"MeanResponsePHBuds" = "PH + Buds",
"MeanResponseGTMultiple" = "> 1 GT"))
# Recreate the stacked bar plot including all response types
ggplot(long_summary_data, aes(x = Treatment, y = Proportion, fill = ResponseType)) +
geom_bar(stat = "identity") +
labs(title = "Proportion of Responses by Treatment",
y = "Proportion", x = "Treatment") +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Abbreviate the treatment names
data <- data %>%
mutate(Treatment = recode(Treatment,
"No Treatment (positive control)" = "Control",
"Whole Aloe arborescens Extract" = "Aloe Extract",
"compound 'A' isolated from Aloe arborescens" = "Compound A",
"compound 'A-SA' from Sigma Aldrich" = "Compound A-SA",
"compound 'B' isolated from Aloe arborescens" = "Compound B",
"compound 'B-SA' from Sigma Aldrich" = "Compound B-SA",
"combination of A and B" = "A + B",
"combination of A-SA and B-SA" = "A-SA + B-SA"))
# Abbreviate the treatment names
data <- data %>%
mutate(Treatment = recode(Treatment,
"No Treatment (positive control)" = "Control",
"Whole Aloe arborescens Extract" = "Aloe Extract",
"compound 'A' isolated from Aloe arborescens" = "Compound A",
"compound 'A-SA' from Sigma Aldrich" = "Compound A-SA",
"compound 'B' isolated from Aloe arborescens" = "Compound B",
"compound 'B-SA' from Sigma Aldrich" = "Compound B-SA",
"combination of A and B" = "A + B",
"combination of A-SA and B-SA" = "A-SA + B-SA"))
# Reshape the data into long format including all response variables
long_data <- data %>%
select(Treatment, ResponseNoChangeProp, ResponseGTProp, ResponsePHProp, ResponseBudsProp,
ResponseGTPHProp, ResponseGTBudsProp, ResponsePHBudsProp, ResponseGTMultipleProp) %>%
pivot_longer(cols = starts_with("Response"), names_to = "ResponseType", values_to = "Proportion") %>%
mutate(ResponseType = recode(ResponseType,
"ResponseGTProp" = "Hyphae (GT)",
"ResponseNoChangeProp" = "No GT, No PH, No Buds",
"ResponsePHProp" = "Pseudohypha (PH)",
"ResponseBudsProp" = "Buds",
"ResponseGTPHProp" = "GT + PH",
"ResponseGTBudsProp" = "GT + Buds",
"ResponsePHBudsProp" = "PH + Buds",
"ResponseGTMultipleProp" = "> 1 GT"))
# Create box plots for each response type by treatment with abbreviated treatment names
ggplot(long_data, aes(x = Treatment, y = Proportion, fill = ResponseType)) +
geom_boxplot() +
facet_wrap(~ ResponseType, scales = "free_y") +
labs(title = "Box Plots of Proportion of Responses by Treatment",
y = "Proportion", x = "Treatment") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
setwd("C:/Users/andro/OneDrive/Desktop/generate_gp_data")
write.csv(train$X, "data/XTrain.csv")
source("spatial_data.R")
source("bsplines_2_3D.R")
mySeed <- 45213
# Sample sizes
n <- 500
nTest <- 25
# Number of subjects
S <- 10
STest <- 10
# Number of BFE's and predictors
K <- 9
p <- 2
# True parameter values
trueSigf2 <- 5
trueThf <- 1
trueSigma2 <- seq(50, 100, length = K)
trueTheta <- runif(K, 0.1, 0.5)
trueTau2 <- 0.2
trueBeta <- c(2, 0.5, -1)
# Generate training data
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 10), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigf2 = trueSigf2,
thf = trueThf,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
mean(train$Y)
save(train, file = "data/train.RData")
#if(mean(train$Y) < 1.9 | mean(train$Y) > 2.1) {
#	stop("change seed")
#}
set.seed(mySeed)
indexTest <- sample(n, nTest)
U <- train$U[indexTest, ]
# Generate testing data
set.seed(mySeed)
XTest <- matrix(runif(nTest*p, 0, 10), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigf2 = trueSigf2,
thf = trueThf,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
write.csv(train$X, "data/XTrain.csv")
?write.csv
write.csv(train$X, "data/XTrain.csv", row.names=F, col.names=F)
write.csv(train$X, "data/XTrain.csv", row.names=FALSE, col.names=FALSE)
write.csv(train$X, "data/XTrain.csv", row.names=FALSE, col.names=FALSE)
write.csv(train$X, "data/XTrain.csv", row.names=FALSE, col.names=NA)
write.csv(train$X, "data/XTrain.csv", col.names=NA)
write.csv(train$X, "data/XTrain.csv", col.names=FALSE)
write.table(train$X, "data/XTrain.csv", col.names=FALSE)
write.table(train$X, "data/XTrain.csv", row.names=FALSE, col.names=FALSE)
write.table(train$X, "data/XTrain.csv", row.names=FALSE, col.names=FALSE, sep=",")
write.table(train$X, "data/XTrain.csv", row.names=FALSE, col.names=FALSE, sep=",")
# Export training data to CSV
write.table(train$X, "data/XTrain.csv", row.names=FALSE, col.names=FALSE, sep=",")
write.table(train$Y, "data/YTrain.csv", row.names=FALSE, col.names=FALSE, sep=",")
write.table(train$Z, "data/ZTrain.csv", row.names=FALSE, col.names=FALSE, sep=",")
write.table(train$U, "data/UTrain.csv", row.names=FALSE, col.names=FALSE, sep=",")
write.table(train$basis, "data/basisTrain.csv", row.names=FALSE, col.names=FALSE, sep=",")
# Export testing data to CSV
write.table(train$X, "data/XTest.csv", row.names=FALSE, col.names=FALSE, sep=",")
write.table(train$Y, "data/YTest.csv", row.names=FALSE, col.names=FALSE, sep=",")
write.table(train$Z, "data/ZTest.csv", row.names=FALSE, col.names=FALSE, sep=",")
write.table(train$U, "data/UTest.csv", row.names=FALSE, col.names=FALSE, sep=",")
write.table(train$basis, "data/basisTest.csv", row.names=FALSE, col.names=FALSE, sep=",")
setwd("~/research/global_gp/generate_data")
set.seed(mySeed)
source("../other_functions/spatial_data.R")
source("../other_functions/bsplines_2_3D.R")
mySeed <- 45213
# Sample sizes
# Can have a "small" dataset with n = 100 and nTest = 25
# Then a "large" dataset with n = 500 and nTest = 100
n <- 100
nTest <- 25
# Number of subjects - can probably leave these alone
S <- 10
STest <- 10
# Number of BFE's and predictors - leave these alone
K <- 9
p <- 2
### True parameter values ###
# Need to play around with these
# Covariance parameters for local covariates
trueSigf2 <- 5
trueThf <- 1
# Covariance parameters for global covariates (each length K)
trueSigma2 <- seq(50, 100, length = K)
trueTheta <- runif(K, 0.1, 0.5)
# Error variance
trueTau2 <- 0.2
# Regression coefficients
trueBeta <- c(2, 0.5, -1)
##########################
# Generate training data #
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 10), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigf2 = trueSigf2,
thf = trueThf,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
mean(train$Y)
save(train, file = "data/small/scen1/train.RData")
source("../other_functions/spatial_data.R")
source("../other_functions/bsplines_2_3D.R")
mySeed <- 45213
# Sample sizes
# Can have a "small" dataset with n = 100 and nTest = 25
# Then a "large" dataset with n = 500 and nTest = 100
n <- 100
nTest <- 25
# Number of subjects - can probably leave these alone
S <- 10
STest <- 10
# Number of BFE's and predictors - leave these alone
K <- 9
p <- 2
### True parameter values ###
# Need to play around with these
# Covariance parameters for local covariates
trueSigf2 <- 5
trueThf <- 1
# Covariance parameters for global covariates (each length K)
trueSigma2 <- seq(50, 100, length = K)
trueTheta <- runif(K, 0.1, 0.5)
# Error variance
trueTau2 <- 0.2
# Regression coefficients
trueBeta <- c(2, 0.5, -1)
##########################
# Generate training data #
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 10), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigf2 = trueSigf2,
thf = trueThf,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
mean(train$Y)
save(train, file = "../data/small/scen1/train.RData")
set.seed(mySeed)
indexTest <- sample(n, nTest)
U <- train$U[indexTest, ]
# Generate testing data
set.seed(mySeed)
XTest <- matrix(runif(nTest*p, 0, 10), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigf2 = trueSigf2,
thf = trueThf,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
test$index <- indexTest
save(test, file = "../data/small/scen1/test.RData")
load("C:/Users/andro/Downloads/HW3_Scotland.RData")
head(scotland.df)
class(scotland.df)
# Part A
library(spdep)
# Part B
nb = poly2nb(scotland.df, queen = TRUE)
nbmat = nb2mat(nb, style = "B")
weights = nb2listw(nb)
weights
weights$neighbours
weights$weights
table(weights$weights)
lapply(weights$weights)
lapply(weights$weights, length)
unlist(lapply(weights$weights, length))
table(unlist(lapply(weights$weights, length)))
