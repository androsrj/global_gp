Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
saveRDS(train, file = "../data/small/scen2/train.RDS")
set.seed(mySeed)
indexTest <- sample(n, nTest)
U <- train$U[indexTest, ]
# Generate testing data
set.seed(mySeed)
XTest <- matrix(runif(nTest*p, 0, 1), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(test$Y)
test$index <- indexTest
saveRDS(test, file = "../data/small/scen2/test.RDS")
setwd("~/research/global_gp")
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
scen <- 2
dir <- paste0("data/small/scen", scen, "/")
train <- readRDS(paste0(dir, "train.RDS"))
test <- readRDS(paste0(dir, "test.RDS"))
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X; XTest <- test$X
Z <- train$Z; ZTest <- test$Z
Y <- train$Y; YTest <- test$Y
U <- train$U; UTest <- test$U
D <- train$D; DTest <- test$D
K <- 9
q <- ncol(X) + 1
S <- nrow(Z)
n <- nrow(X)
p <- ncol(X)
X0 <<- cbind(rep(1, n), X)
A <<- rep(1, S) %x% cbind(matrix(1, nrow = n, ncol = 1), X)
starting <- list(sigma2 = seq(5, 10, length = K),
theta = seq(0.1, 0.5, length = K),
sigb2 = c(0.5, 0.75, 1),
thb = c(0.2, 0.25, 0.3),
tau2 = 0.2,
beta = c(5, 2, -4))
getSigma <- function(sigma2, theta, sigb2, thb, tau2, beta) {
BF <- Bsplines_2D(Z, df = c(sqrt(K), sqrt(K)))
basis <<- lapply(1:K, function(k) {
Reduce("rbind", lapply(1:S, \(s) BF[s, k] * diag(n)))
})
B <- baseVariance(theta = theta, D = D)
DB <- lapply(1:(p+1), \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CBFull <- diag(S) %x% Reduce("+", DB)
Sigma <- Reduce("+", lapply(1:K, \(k) sigma2[k] * B[[k]])) +
CBFull +
tau2 * diag(n * S)
Sigma
}
tau2.vals <- seq(2, 10, by = 0.25)
f <- function(tau2) {
Sigma1 <- getSigma(starting$sigma, starting$theta, starting$sigb2, starting$thb, tau2, starting$beta)
logLik(Sigma1, starting$beta)
}
lik <- sapply(tau2.vals, \(x) f(x))
plot(tau2.vals, lik)
tau2.vals[which.max(lik)]
#Sigma <- getSigma(starting$sigma, starting$theta, starting$sigb2, starting$thb, 0.2, starting$beta)
#hist(diag(Sigma))
#sigma2 <- starting$sigma2
#theta <- starting$theta
#sigb2 <- starting$sigb2
#thb <- starting$sigb2
#beta <- starting$beta
#tau2 <- 0.2
setwd("~/research/global_gp/other_functions")
setwd("~/research/global_gp/generate_data")
source("../other_functions/spatial_data.R")
source("../other_functions/bsplines_2_3D.R")
mySeed <- 4528
library(mvtnorm)
# Sample sizes
# Can have a "small" dataset with n = 100 and nTest = 25
# Then a "large" dataset with n = 500 and nTest = 100
n <- 100
nTest <- 25
# Number of subjects - can probably leave these alone
S <- 10
STest <- 10
# Number of BFE's and predictors - leave these alone
K <- 9
p <- 2
# Covariance parameters for beta
trueSigb2 <- seq(0.5, 1, length = p + 1)
trueThb <- seq(0.2, 0.3, length = p + 1)
# Covariance parameters for global covariates (each length K)
trueSigma2 <- seq(5, 10, length = K)
trueTheta <- seq(0.1, 0.5, length = K)
# Error variance
trueTau2 <- 8.0
# Regression coefficients
#trueBeta <- c(1, 0.5, -1)
#trueBeta <- rep(0, 3)
trueBeta <- c(5, 2, -4)
##########################
# Generate training data #
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 1), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
# Generate testing data
set.seed(mySeed)
XTest <- matrix(runif(nTest*p, 0, 1), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
U <- train$U[indexTest, ]
# Generate testing data
set.seed(mySeed)
XTest <- matrix(runif(nTest*p, 0, 1), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
source("../other_functions/spatial_data.R")
source("../other_functions/bsplines_2_3D.R")
mySeed <- 4528
library(mvtnorm)
# Sample sizes
# Can have a "small" dataset with n = 100 and nTest = 25
# Then a "large" dataset with n = 500 and nTest = 100
n <- 100
nTest <- 25
# Number of subjects - can probably leave these alone
S <- 10
STest <- 10
# Number of BFE's and predictors - leave these alone
K <- 9
p <- 2
### True parameter values ###
# Need to play around with these
# Covariance parameters for beta
trueSigb2 <- seq(0.05, 1, length = p + 1)
trueThb <- seq(0.2, 0.3, length = p + 1)
# Covariance parameters for global covariates (each length K)
trueSigma2 <- seq(5, 10, length = K)
trueTheta <- seq(0.1, 0.5, length = K)
# Error variance
trueTau2 <- 8.0
# Regression coefficients
#trueBeta <- c(1, 0.5, -1)
#trueBeta <- rep(0, 3)
trueBeta <- c(5, 2, -4)
##########################
# Generate training data #
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 1), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
saveRDS(train, file = "../data/small/scen2/train.RDS")
set.seed(mySeed)
indexTest <- sample(n, nTest)
U <- train$U[indexTest, ]
# Generate testing data
set.seed(mySeed)
XTest <- matrix(runif(nTest*p, 0, 1), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(test$Y)
test$index <- indexTest
saveRDS(test, file = "../data/small/scen2/test.RDS")
setwd("~/research/global_gp/generate_data")
source("../other_functions/spatial_data.R")
source("../other_functions/bsplines_2_3D.R")
mySeed <- 4528
library(mvtnorm)
# Sample sizes
# Can have a "small" dataset with n = 100 and nTest = 25
# Then a "large" dataset with n = 500 and nTest = 100
n <- 100
nTest <- 25
# Number of subjects - can probably leave these alone
S <- 10
STest <- 10
# Number of BFE's and predictors - leave these alone
K <- 9
p <- 2
### True parameter values ###
# Need to play around with these
# Covariance parameters for beta
trueSigb2 <- seq(0.5, 1, length = p + 1)
trueThb <- seq(0.2, 0.3, length = p + 1)
# Covariance parameters for global covariates (each length K)
trueSigma2 <- seq(5, 10, length = K)
trueTheta <- seq(0.1, 0.5, length = K)
# Error variance
trueTau2 <- 8.0
# Regression coefficients
#trueBeta <- c(1, 0.5, -1)
#trueBeta <- rep(0, 3)
trueBeta <- c(5, 2, -4)
##########################
# Generate training data #
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 1), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
saveRDS(train, file = "../data/small/scen2/train.RDS")
set.seed(mySeed)
indexTest <- sample(n, nTest)
U <- train$U[indexTest, ]
# Generate testing data
set.seed(mySeed)
XTest <- matrix(runif(nTest*p, 0, 1), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(test$Y)
test$index <- indexTest
saveRDS(test, file = "../data/small/scen2/test.RDS")
setwd("~/research/global_gp")
setwd("~/research/global_gp/generate_data")
source("../other_functions/spatial_data.R")
source("../other_functions/bsplines_2_3D.R")
mySeed <- 4528
library(mvtnorm)
# Sample sizes
# Can have a "small" dataset with n = 100 and nTest = 25
# Then a "large" dataset with n = 500 and nTest = 100
n <- 100
nTest <- 25
# Number of subjects - can probably leave these alone
S <- 10
STest <- 10
# Number of BFE's and predictors - leave these alone
K <- 9
p <- 2
### True parameter values ###
# Need to play around with these
# Covariance parameters for beta
trueSigb2 <- seq(0.5, 1, length = p + 1)
trueThb <- seq(0.2, 0.3, length = p + 1)
# Covariance parameters for global covariates (each length K)
trueSigma2 <- seq(5, 10, length = K)
trueTheta <- seq(0.1, 0.5, length = K)
# Error variance
trueTau2 <- 0.5
# Regression coefficients
#trueBeta <- c(1, 0.5, -1)
#trueBeta <- rep(0, 3)
trueBeta <- c(5, 2, -4)
##########################
# Generate training data #
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 1), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
saveRDS(train, file = "../data/small/scen2/train.RDS")
set.seed(mySeed)
indexTest <- sample(n, nTest)
U <- train$U[indexTest, ]
# Generate testing data
set.seed(mySeed)
XTest <- matrix(runif(nTest*p, 0, 1), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(test$Y)
test$index <- indexTest
saveRDS(test, file = "../data/small/scen2/test.RDS")
setwd("~/research/global_gp")
source("mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
source("mcmc_functions/priors.R")
source("mcmc_functions/jacobians.R")
source("mcmc_functions/likelihood.R")
source("mcmc_functions/posterior.R")
source("other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
source("other_functions/bsplines_2_3D.R")
scen <- 2
dir <- paste0("data/small/scen", scen, "/")
train <- readRDS(paste0(dir, "train.RDS"))
test <- readRDS(paste0(dir, "test.RDS"))
n <- nrow(train$X)
nTest <- nrow(test$X)
X <- train$X; XTest <- test$X
Z <- train$Z; ZTest <- test$Z
Y <- train$Y; YTest <- test$Y
U <- train$U; UTest <- test$U
D <- train$D; DTest <- test$D
K <- 9
q <- ncol(X) + 1
S <- nrow(Z)
n <- nrow(X)
p <- ncol(X)
X0 <<- cbind(rep(1, n), X)
A <<- rep(1, S) %x% cbind(matrix(1, nrow = n, ncol = 1), X)
starting <- list(sigma2 = seq(5, 10, length = K),
theta = seq(0.1, 0.5, length = K),
sigb2 = c(0.5, 0.75, 1),
thb = c(0.2, 0.25, 0.3),
tau2 = 0.2,
beta = c(5, 2, -4))
getSigma <- function(sigma2, theta, sigb2, thb, tau2, beta) {
BF <- Bsplines_2D(Z, df = c(sqrt(K), sqrt(K)))
basis <<- lapply(1:K, function(k) {
Reduce("rbind", lapply(1:S, \(s) BF[s, k] * diag(n)))
})
B <- baseVariance(theta = theta, D = D)
DB <- lapply(1:(p+1), \(j) matrix(X0[ , j], nrow = n, ncol = n) *
(sigb2[j] * exp(-thb[j] * D)) *
matrix(X0[ , j], nrow = n, ncol = n, byrow = T))
CBFull <- matrix(1, S, S) %x% Reduce("+", DB)
Sigma <- Reduce("+", lapply(1:K, \(k) sigma2[k] * B[[k]])) +
CBFull +
tau2 * diag(n * S)
Sigma
}
tau2.vals <- seq(0.1, 2, by = 0.1)
f <- function(tau2) {
Sigma1 <- getSigma(starting$sigma, starting$theta, starting$sigb2, starting$thb, tau2, starting$beta)
logLik(Sigma1, starting$beta)
}
lik <- sapply(tau2.vals, \(x) f(x))
plot(tau2.vals, lik)
tau2.vals[which.max(lik)]
#Sigma <- getSigma(starting$sigma, starting$theta, starting$sigb2, starting$thb, 0.2, starting$beta)
#hist(diag(Sigma))
#sigma2 <- starting$sigma2
#theta <- starting$theta
#sigb2 <- starting$sigb2
#thb <- starting$sigb2
#beta <- starting$beta
#tau2 <- 0.2
setwd("~/research/global_gp/generate_data")
source("../other_functions/spatial_data.R")
source("../other_functions/bsplines_2_3D.R")
mySeed <- 4528
library(mvtnorm)
# Sample sizes
# Can have a "small" dataset with n = 100 and nTest = 25
# Then a "large" dataset with n = 500 and nTest = 100
n <- 100
nTest <- 25
# Number of subjects - can probably leave these alone
S <- 10
STest <- 10
# Number of BFE's and predictors - leave these alone
K <- 9
p <- 2
### True parameter values ###
# Need to play around with these
# Covariance parameters for beta
trueSigb2 <- seq(0.5, 1, length = p + 1)
trueThb <- seq(0.2, 0.3, length = p + 1)
# Covariance parameters for global covariates (each length K)
trueSigma2 <- seq(5, 10, length = K)
trueTheta <- seq(0.1, 0.5, length = K)
# Error variance
trueTau2 <- 0.5
# Regression coefficients
#trueBeta <- c(1, 0.5, -1)
#trueBeta <- rep(0, 3)
trueBeta <- c(5, 2, -4)
##########################
# Generate training data #
set.seed(mySeed)
X <- matrix(runif(n*p, 0, 1), nrow = n, ncol = p)
Z <- matrix(runif(2 * S, 0, 100), ncol = 2)
train <- spatialData(n = n,
X = X,
Z = Z,
K = K,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
saveRDS(train, file = "../data/small/scen2/train.RDS")
set.seed(mySeed)
indexTest <- sample(n, nTest)
U <- train$U[indexTest, ]
# Generate testing data
set.seed(mySeed)
XTest <- matrix(runif(nTest*p, 0, 1), nrow = nTest, ncol = p)
ZTest <- matrix(runif(2 * STest, 0, 100), ncol = 2)
test <- spatialData(n = nTest,
X = XTest,
Z = ZTest,
K = K,
U = U,
sigb2 = trueSigb2,
thb = trueThb,
sigma2 = trueSigma2,
theta = trueTheta,
tau2 = trueTau2,
beta = trueBeta,
range = c(0, 100))
sd(test$Y)
test$index <- indexTest
saveRDS(test, file = "../data/small/scen2/test.RDS")
